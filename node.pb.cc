// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "node.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace onevote {

namespace {

const ::google::protobuf::Descriptor* Empty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Empty_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddrRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddrRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddrResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddrResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_node_2eproto() {
  protobuf_AddDesc_node_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "node.proto");
  GOOGLE_CHECK(file != NULL);
  Empty_descriptor_ = file->message_type(0);
  static const int Empty_offsets_[1] = {
  };
  Empty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Empty_descriptor_,
      Empty::default_instance_,
      Empty_offsets_,
      -1,
      -1,
      -1,
      sizeof(Empty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _is_default_instance_));
  BlockMsg_descriptor_ = file->message_type(1);
  static const int BlockMsg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, block_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, prev_block_sha1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, merkle_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, transaction_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, num_transactions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, verifier_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, final_hash_),
  };
  BlockMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlockMsg_descriptor_,
      BlockMsg::default_instance_,
      BlockMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(BlockMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, _is_default_instance_));
  TransactionMsg_descriptor_ = file->message_type(2);
  static const int TransactionMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMsg, sender_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMsg, vote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMsg, timestamp_),
  };
  TransactionMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionMsg_descriptor_,
      TransactionMsg::default_instance_,
      TransactionMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransactionMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMsg, _is_default_instance_));
  AddrRequest_descriptor_ = file->message_type(3);
  static const int AddrRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrRequest, num_requested_),
  };
  AddrRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddrRequest_descriptor_,
      AddrRequest::default_instance_,
      AddrRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddrRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrRequest, _is_default_instance_));
  AddrResponse_descriptor_ = file->message_type(4);
  static const int AddrResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrResponse, peer_),
  };
  AddrResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddrResponse_descriptor_,
      AddrResponse::default_instance_,
      AddrResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddrResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrResponse, _is_default_instance_));
  TransactionRequest_descriptor_ = file->message_type(5);
  static const int TransactionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRequest, publickey_),
  };
  TransactionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionRequest_descriptor_,
      TransactionRequest::default_instance_,
      TransactionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransactionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRequest, _is_default_instance_));
  BlockRequest_descriptor_ = file->message_type(6);
  static const int BlockRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRequest, block_number_),
  };
  BlockRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlockRequest_descriptor_,
      BlockRequest::default_instance_,
      BlockRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(BlockRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRequest, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_node_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Empty_descriptor_, &Empty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlockMsg_descriptor_, &BlockMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionMsg_descriptor_, &TransactionMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddrRequest_descriptor_, &AddrRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddrResponse_descriptor_, &AddrResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionRequest_descriptor_, &TransactionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlockRequest_descriptor_, &BlockRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_node_2eproto() {
  delete Empty::default_instance_;
  delete Empty_reflection_;
  delete BlockMsg::default_instance_;
  delete BlockMsg_reflection_;
  delete TransactionMsg::default_instance_;
  delete TransactionMsg_reflection_;
  delete AddrRequest::default_instance_;
  delete AddrRequest_reflection_;
  delete AddrResponse::default_instance_;
  delete AddrResponse_reflection_;
  delete TransactionRequest::default_instance_;
  delete TransactionRequest_reflection_;
  delete BlockRequest::default_instance_;
  delete BlockRequest_reflection_;
}

void protobuf_AddDesc_node_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nnode.proto\022\010onevote\"\007\n\005Empty\"\333\001\n\010Bloc"
    "kMsg\022\024\n\014block_number\030\010 \001(\r\022\027\n\017prev_block"
    "_SHA1\030\001 \001(\t\022\r\n\005magic\030\002 \001(\003\022\023\n\013merkle_roo"
    "t\030\003 \001(\t\0221\n\017transaction_msg\030\004 \003(\0132\030.onvev"
    "ote.TransactionMsg\022\030\n\020num_transactions\030\005"
    " \001(\r\022\033\n\023verifier_public_key\030\006 \001(\t\022\022\n\nfin"
    "al_hash\030\007 \001(\t\"L\n\016TransactionMsg\022\031\n\021sende"
    "r_public_key\030\002 \001(\t\022\014\n\004vote\030\003 \001(\t\022\021\n\ttime"
    "stamp\030\004 \001(\001\"$\n\013AddrRequest\022\025\n\rnum_reques"
    "ted\030\001 \001(\r\"\034\n\014AddrResponse\022\014\n\004peer\030\001 \003(\t\""
    "\'\n\022TransactionRequest\022\021\n\tpublickey\030\001 \001(\t"
    "\"$\n\014BlockRequest\022\024\n\014block_number\030\001 \001(\r2\373"
    "\002\n\005Miner\0227\n\016BroadcastBlock\022\022.onevote.Bl"
    "ockMsg\032\017.onevote.Empty\"\000\022C\n\024BroadcastTr"
    "ansaction\022\030.onevote.TransactionMsg\032\017.on"
    "vevote.Empty\"\000\022:\n\007GetAddr\022\025.onevote.Add"
    "rRequest\032\026.onevote.AddrResponse\"\000\022J\n\016Ge"
    "tTransaction\022\034.onevote.TransactionReque"
    "st\032\030.onevote.TransactionMsg\"\000\0228\n\010GetBlo"
    "ck\022\026.onevote.BlockRequest\032\022.onevote.Bl"
    "ockMsg\"\000\0222\n\014GetHeartbeat\022\017.onevote.Empt"
    "y\032\017.onevote.Empty\"\000b\006proto3", 868);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "node.proto", &protobuf_RegisterTypes);
  Empty::default_instance_ = new Empty();
  BlockMsg::default_instance_ = new BlockMsg();
  TransactionMsg::default_instance_ = new TransactionMsg();
  AddrRequest::default_instance_ = new AddrRequest();
  AddrResponse::default_instance_ = new AddrResponse();
  TransactionRequest::default_instance_ = new TransactionRequest();
  BlockRequest::default_instance_ = new BlockRequest();
  Empty::default_instance_->InitAsDefaultInstance();
  BlockMsg::default_instance_->InitAsDefaultInstance();
  TransactionMsg::default_instance_->InitAsDefaultInstance();
  AddrRequest::default_instance_->InitAsDefaultInstance();
  AddrResponse::default_instance_->InitAsDefaultInstance();
  TransactionRequest::default_instance_->InitAsDefaultInstance();
  BlockRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_node_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_node_2eproto {
  StaticDescriptorInitializer_node_2eproto() {
    protobuf_AddDesc_node_2eproto();
  }
} static_descriptor_initializer_node_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:onevote.Empty)
}

void Empty::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onevote.Empty)
}

void Empty::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:onevote.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Empty_descriptor_;
}

const Empty& Empty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

Empty* Empty::default_instance_ = NULL;

Empty* Empty::New(::google::protobuf::Arena* arena) const {
  Empty* n = new Empty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Empty::Clear() {
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onevote.Empty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:onevote.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onevote.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onevote.Empty)
  // @@protoc_insertion_point(serialize_end:onevote.Empty)
}

::google::protobuf::uint8* Empty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:onevote.Empty)
  // @@protoc_insertion_point(serialize_to_array_end:onevote.Empty)
  return target;
}

int Empty::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Empty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {

  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Empty_descriptor_;
  metadata.reflection = Empty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Empty

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockMsg::kBlockNumberFieldNumber;
const int BlockMsg::kPrevBlockSHA1FieldNumber;
const int BlockMsg::kMagicFieldNumber;
const int BlockMsg::kMerkleRootFieldNumber;
const int BlockMsg::kTransactionMsgFieldNumber;
const int BlockMsg::kNumTransactionsFieldNumber;
const int BlockMsg::kVerifierPublicKeyFieldNumber;
const int BlockMsg::kFinalHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockMsg::BlockMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:onevote.BlockMsg)
}

void BlockMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BlockMsg::BlockMsg(const BlockMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onevote.BlockMsg)
}

void BlockMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  block_number_ = 0u;
  prev_block_sha1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  magic_ = GOOGLE_LONGLONG(0);
  merkle_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_transactions_ = 0u;
  verifier_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BlockMsg::~BlockMsg() {
  // @@protoc_insertion_point(destructor:onevote.BlockMsg)
  SharedDtor();
}

void BlockMsg::SharedDtor() {
  prev_block_sha1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_root_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifier_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BlockMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMsg_descriptor_;
}

const BlockMsg& BlockMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

BlockMsg* BlockMsg::default_instance_ = NULL;

BlockMsg* BlockMsg::New(::google::protobuf::Arena* arena) const {
  BlockMsg* n = new BlockMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockMsg::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BlockMsg*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(magic_, num_transactions_);
  prev_block_sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifier_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  transaction_msg_.Clear();
}

bool BlockMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onevote.BlockMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string prev_block_SHA1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_block_sha1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prev_block_sha1().data(), this->prev_block_sha1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onevote.BlockMsg.prev_block_SHA1"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_magic;
        break;
      }

      // optional int64 magic = 2;
      case 2: {
        if (tag == 16) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &magic_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_merkle_root;
        break;
      }

      // optional string merkle_root = 3;
      case 3: {
        if (tag == 26) {
         parse_merkle_root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merkle_root()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->merkle_root().data(), this->merkle_root().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onevote.BlockMsg.merkle_root"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transaction_msg;
        break;
      }

      // repeated .onevote.TransactionMsg transaction_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_transaction_msg:
          DO_(input->IncrementRecursionDepth());
         parse_loop_transaction_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_transaction_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_transaction_msg;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_num_transactions;
        break;
      }

      // optional uint32 num_transactions = 5;
      case 5: {
        if (tag == 40) {
         parse_num_transactions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_transactions_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_verifier_public_key;
        break;
      }

      // optional string verifier_public_key = 6;
      case 6: {
        if (tag == 50) {
         parse_verifier_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifier_public_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verifier_public_key().data(), this->verifier_public_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onevote.BlockMsg.verifier_public_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_final_hash;
        break;
      }

      // optional string final_hash = 7;
      case 7: {
        if (tag == 58) {
         parse_final_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_final_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->final_hash().data(), this->final_hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onevote.BlockMsg.final_hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_block_number;
        break;
      }

      // optional uint32 block_number = 8;
      case 8: {
        if (tag == 64) {
         parse_block_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onevote.BlockMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onevote.BlockMsg)
  return false;
#undef DO_
}

void BlockMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onevote.BlockMsg)
  // optional string prev_block_SHA1 = 1;
  if (this->prev_block_sha1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_block_sha1().data(), this->prev_block_sha1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onevote.BlockMsg.prev_block_SHA1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->prev_block_sha1(), output);
  }

  // optional int64 magic = 2;
  if (this->magic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->magic(), output);
  }

  // optional string merkle_root = 3;
  if (this->merkle_root().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->merkle_root().data(), this->merkle_root().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onevote.BlockMsg.merkle_root");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->merkle_root(), output);
  }

  // repeated .onevote.TransactionMsg transaction_msg = 4;
  for (unsigned int i = 0, n = this->transaction_msg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->transaction_msg(i), output);
  }

  // optional uint32 num_transactions = 5;
  if (this->num_transactions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_transactions(), output);
  }

  // optional string verifier_public_key = 6;
  if (this->verifier_public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verifier_public_key().data(), this->verifier_public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onevote.BlockMsg.verifier_public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->verifier_public_key(), output);
  }

  // optional string final_hash = 7;
  if (this->final_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->final_hash().data(), this->final_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onevote.BlockMsg.final_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->final_hash(), output);
  }

  // optional uint32 block_number = 8;
  if (this->block_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->block_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:onevote.BlockMsg)
}

::google::protobuf::uint8* BlockMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:onevote.BlockMsg)
  // optional string prev_block_SHA1 = 1;
  if (this->prev_block_sha1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_block_sha1().data(), this->prev_block_sha1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onevote.BlockMsg.prev_block_SHA1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prev_block_sha1(), target);
  }

  // optional int64 magic = 2;
  if (this->magic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->magic(), target);
  }

  // optional string merkle_root = 3;
  if (this->merkle_root().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->merkle_root().data(), this->merkle_root().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onevote.BlockMsg.merkle_root");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->merkle_root(), target);
  }

  // repeated .onevote.TransactionMsg transaction_msg = 4;
  for (unsigned int i = 0, n = this->transaction_msg_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->transaction_msg(i), target);
  }

  // optional uint32 num_transactions = 5;
  if (this->num_transactions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_transactions(), target);
  }

  // optional string verifier_public_key = 6;
  if (this->verifier_public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verifier_public_key().data(), this->verifier_public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onevote.BlockMsg.verifier_public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->verifier_public_key(), target);
  }

  // optional string final_hash = 7;
  if (this->final_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->final_hash().data(), this->final_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onevote.BlockMsg.final_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->final_hash(), target);
  }

  // optional uint32 block_number = 8;
  if (this->block_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->block_number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:onevote.BlockMsg)
  return target;
}

int BlockMsg::ByteSize() const {
  int total_size = 0;

  // optional uint32 block_number = 8;
  if (this->block_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->block_number());
  }

  // optional string prev_block_SHA1 = 1;
  if (this->prev_block_sha1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prev_block_sha1());
  }

  // optional int64 magic = 2;
  if (this->magic() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->magic());
  }

  // optional string merkle_root = 3;
  if (this->merkle_root().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->merkle_root());
  }

  // optional uint32 num_transactions = 5;
  if (this->num_transactions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_transactions());
  }

  // optional string verifier_public_key = 6;
  if (this->verifier_public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->verifier_public_key());
  }

  // optional string final_hash = 7;
  if (this->final_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->final_hash());
  }

  // repeated .onevote.TransactionMsg transaction_msg = 4;
  total_size += 1 * this->transaction_msg_size();
  for (int i = 0; i < this->transaction_msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transaction_msg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BlockMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMsg::MergeFrom(const BlockMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  transaction_msg_.MergeFrom(from.transaction_msg_);
  if (from.block_number() != 0) {
    set_block_number(from.block_number());
  }
  if (from.prev_block_sha1().size() > 0) {

    prev_block_sha1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_block_sha1_);
  }
  if (from.magic() != 0) {
    set_magic(from.magic());
  }
  if (from.merkle_root().size() > 0) {

    merkle_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkle_root_);
  }
  if (from.num_transactions() != 0) {
    set_num_transactions(from.num_transactions());
  }
  if (from.verifier_public_key().size() > 0) {

    verifier_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifier_public_key_);
  }
  if (from.final_hash().size() > 0) {

    final_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.final_hash_);
  }
}

void BlockMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMsg::CopyFrom(const BlockMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMsg::IsInitialized() const {

  return true;
}

void BlockMsg::Swap(BlockMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockMsg::InternalSwap(BlockMsg* other) {
  std::swap(block_number_, other->block_number_);
  prev_block_sha1_.Swap(&other->prev_block_sha1_);
  std::swap(magic_, other->magic_);
  merkle_root_.Swap(&other->merkle_root_);
  transaction_msg_.UnsafeArenaSwap(&other->transaction_msg_);
  std::swap(num_transactions_, other->num_transactions_);
  verifier_public_key_.Swap(&other->verifier_public_key_);
  final_hash_.Swap(&other->final_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMsg_descriptor_;
  metadata.reflection = BlockMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockMsg

// optional uint32 block_number = 8;
void BlockMsg::clear_block_number() {
  block_number_ = 0u;
}
 ::google::protobuf::uint32 BlockMsg::block_number() const {
  // @@protoc_insertion_point(field_get:onevote.BlockMsg.block_number)
  return block_number_;
}
 void BlockMsg::set_block_number(::google::protobuf::uint32 value) {

  block_number_ = value;
  // @@protoc_insertion_point(field_set:onevote.BlockMsg.block_number)
}

// optional string prev_block_SHA1 = 1;
void BlockMsg::clear_prev_block_sha1() {
  prev_block_sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BlockMsg::prev_block_sha1() const {
  // @@protoc_insertion_point(field_get:onevote.BlockMsg.prev_block_SHA1)
  return prev_block_sha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockMsg::set_prev_block_sha1(const ::std::string& value) {

  prev_block_sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onevote.BlockMsg.prev_block_SHA1)
}
 void BlockMsg::set_prev_block_sha1(const char* value) {

  prev_block_sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onevote.BlockMsg.prev_block_SHA1)
}
 void BlockMsg::set_prev_block_sha1(const char* value, size_t size) {

  prev_block_sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onevote.BlockMsg.prev_block_SHA1)
}
 ::std::string* BlockMsg::mutable_prev_block_sha1() {

  // @@protoc_insertion_point(field_mutable:onevote.BlockMsg.prev_block_SHA1)
  return prev_block_sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BlockMsg::release_prev_block_sha1() {

  return prev_block_sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockMsg::set_allocated_prev_block_sha1(::std::string* prev_block_sha1) {
  if (prev_block_sha1 != NULL) {

  } else {

  }
  prev_block_sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_block_sha1);
  // @@protoc_insertion_point(field_set_allocated:onevote.BlockMsg.prev_block_SHA1)
}

// optional int64 magic = 2;
void BlockMsg::clear_magic() {
  magic_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 BlockMsg::magic() const {
  // @@protoc_insertion_point(field_get:onevote.BlockMsg.magic)
  return magic_;
}
 void BlockMsg::set_magic(::google::protobuf::int64 value) {

  magic_ = value;
  // @@protoc_insertion_point(field_set:onevote.BlockMsg.magic)
}

// optional string merkle_root = 3;
void BlockMsg::clear_merkle_root() {
  merkle_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BlockMsg::merkle_root() const {
  // @@protoc_insertion_point(field_get:onevote.BlockMsg.merkle_root)
  return merkle_root_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockMsg::set_merkle_root(const ::std::string& value) {

  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onevote.BlockMsg.merkle_root)
}
 void BlockMsg::set_merkle_root(const char* value) {

  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onevote.BlockMsg.merkle_root)
}
 void BlockMsg::set_merkle_root(const char* value, size_t size) {

  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onevote.BlockMsg.merkle_root)
}
 ::std::string* BlockMsg::mutable_merkle_root() {

  // @@protoc_insertion_point(field_mutable:onevote.BlockMsg.merkle_root)
  return merkle_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BlockMsg::release_merkle_root() {

  return merkle_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockMsg::set_allocated_merkle_root(::std::string* merkle_root) {
  if (merkle_root != NULL) {

  } else {

  }
  merkle_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkle_root);
  // @@protoc_insertion_point(field_set_allocated:onevote.BlockMsg.merkle_root)
}

// repeated .onevote.TransactionMsg transaction_msg = 4;
int BlockMsg::transaction_msg_size() const {
  return transaction_msg_.size();
}
void BlockMsg::clear_transaction_msg() {
  transaction_msg_.Clear();
}
const ::onevote::TransactionMsg& BlockMsg::transaction_msg(int index) const {
  // @@protoc_insertion_point(field_get:onevote.BlockMsg.transaction_msg)
  return transaction_msg_.Get(index);
}
::onevote::TransactionMsg* BlockMsg::mutable_transaction_msg(int index) {
  // @@protoc_insertion_point(field_mutable:onevote.BlockMsg.transaction_msg)
  return transaction_msg_.Mutable(index);
}
::onevote::TransactionMsg* BlockMsg::add_transaction_msg() {
  // @@protoc_insertion_point(field_add:onevote.BlockMsg.transaction_msg)
  return transaction_msg_.Add();
}
::google::protobuf::RepeatedPtrField< ::onevote::TransactionMsg >*
BlockMsg::mutable_transaction_msg() {
  // @@protoc_insertion_point(field_mutable_list:onevote.BlockMsg.transaction_msg)
  return &transaction_msg_;
}
const ::google::protobuf::RepeatedPtrField< ::onevote::TransactionMsg >&
BlockMsg::transaction_msg() const {
  // @@protoc_insertion_point(field_list:onevote.BlockMsg.transaction_msg)
  return transaction_msg_;
}

// optional uint32 num_transactions = 5;
void BlockMsg::clear_num_transactions() {
  num_transactions_ = 0u;
}
 ::google::protobuf::uint32 BlockMsg::num_transactions() const {
  // @@protoc_insertion_point(field_get:onevote.BlockMsg.num_transactions)
  return num_transactions_;
}
 void BlockMsg::set_num_transactions(::google::protobuf::uint32 value) {

  num_transactions_ = value;
  // @@protoc_insertion_point(field_set:onevote.BlockMsg.num_transactions)
}

// optional string verifier_public_key = 6;
void BlockMsg::clear_verifier_public_key() {
  verifier_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BlockMsg::verifier_public_key() const {
  // @@protoc_insertion_point(field_get:onevote.BlockMsg.verifier_public_key)
  return verifier_public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockMsg::set_verifier_public_key(const ::std::string& value) {

  verifier_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onevote.BlockMsg.verifier_public_key)
}
 void BlockMsg::set_verifier_public_key(const char* value) {

  verifier_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onevote.BlockMsg.verifier_public_key)
}
 void BlockMsg::set_verifier_public_key(const char* value, size_t size) {

  verifier_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onevote.BlockMsg.verifier_public_key)
}
 ::std::string* BlockMsg::mutable_verifier_public_key() {

  // @@protoc_insertion_point(field_mutable:onevote.BlockMsg.verifier_public_key)
  return verifier_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BlockMsg::release_verifier_public_key() {

  return verifier_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockMsg::set_allocated_verifier_public_key(::std::string* verifier_public_key) {
  if (verifier_public_key != NULL) {

  } else {

  }
  verifier_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifier_public_key);
  // @@protoc_insertion_point(field_set_allocated:onevote.BlockMsg.verifier_public_key)
}

// optional string final_hash = 7;
void BlockMsg::clear_final_hash() {
  final_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BlockMsg::final_hash() const {
  // @@protoc_insertion_point(field_get:onevote.BlockMsg.final_hash)
  return final_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockMsg::set_final_hash(const ::std::string& value) {

  final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onevote.BlockMsg.final_hash)
}
 void BlockMsg::set_final_hash(const char* value) {

  final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onevote.BlockMsg.final_hash)
}
 void BlockMsg::set_final_hash(const char* value, size_t size) {

  final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onevote.BlockMsg.final_hash)
}
 ::std::string* BlockMsg::mutable_final_hash() {

  // @@protoc_insertion_point(field_mutable:onevote.BlockMsg.final_hash)
  return final_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BlockMsg::release_final_hash() {

  return final_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlockMsg::set_allocated_final_hash(::std::string* final_hash) {
  if (final_hash != NULL) {

  } else {

  }
  final_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), final_hash);
  // @@protoc_insertion_point(field_set_allocated:onevote.BlockMsg.final_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionMsg::kSenderPublicKeyFieldNumber;
const int TransactionMsg::kVoteFieldNumber;
const int TransactionMsg::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionMsg::TransactionMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:onevote.TransactionMsg)
}

void TransactionMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TransactionMsg::TransactionMsg(const TransactionMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onevote.TransactionMsg)
}

void TransactionMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sender_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
}

TransactionMsg::~TransactionMsg() {
  // @@protoc_insertion_point(destructor:onevote.TransactionMsg)
  SharedDtor();
}

void TransactionMsg::SharedDtor() {
  sender_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vote_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransactionMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionMsg_descriptor_;
}

const TransactionMsg& TransactionMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

TransactionMsg* TransactionMsg::default_instance_ = NULL;

TransactionMsg* TransactionMsg::New(::google::protobuf::Arena* arena) const {
  TransactionMsg* n = new TransactionMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionMsg::Clear() {
  sender_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
}

bool TransactionMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onevote.TransactionMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sender_public_key = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_public_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender_public_key().data(), this->sender_public_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onevote.TransactionMsg.sender_public_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vote;
        break;
      }

      // optional string vote = 3;
      case 3: {
        if (tag == 26) {
         parse_vote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vote()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vote().data(), this->vote().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onevote.TransactionMsg.vote"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 4;
      case 4: {
        if (tag == 33) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onevote.TransactionMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onevote.TransactionMsg)
  return false;
#undef DO_
}

void TransactionMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onevote.TransactionMsg)
  // optional string sender_public_key = 2;
  if (this->sender_public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_public_key().data(), this->sender_public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onevote.TransactionMsg.sender_public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sender_public_key(), output);
  }

  // optional string vote = 3;
  if (this->vote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vote().data(), this->vote().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onevote.TransactionMsg.vote");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vote(), output);
  }

  // optional double timestamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:onevote.TransactionMsg)
}

::google::protobuf::uint8* TransactionMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:onevote.TransactionMsg)
  // optional string sender_public_key = 2;
  if (this->sender_public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_public_key().data(), this->sender_public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onevote.TransactionMsg.sender_public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sender_public_key(), target);
  }

  // optional string vote = 3;
  if (this->vote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vote().data(), this->vote().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onevote.TransactionMsg.vote");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vote(), target);
  }

  // optional double timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:onevote.TransactionMsg)
  return target;
}

int TransactionMsg::ByteSize() const {
  int total_size = 0;

  // optional string sender_public_key = 2;
  if (this->sender_public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender_public_key());
  }

  // optional string vote = 3;
  if (this->vote().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vote());
  }

  // optional double timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionMsg::MergeFrom(const TransactionMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.sender_public_key().size() > 0) {

    sender_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_public_key_);
  }
  if (from.vote().size() > 0) {

    vote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vote_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void TransactionMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionMsg::CopyFrom(const TransactionMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionMsg::IsInitialized() const {

  return true;
}

void TransactionMsg::Swap(TransactionMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionMsg::InternalSwap(TransactionMsg* other) {
  sender_public_key_.Swap(&other->sender_public_key_);
  vote_.Swap(&other->vote_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionMsg_descriptor_;
  metadata.reflection = TransactionMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionMsg

// optional string sender_public_key = 2;
void TransactionMsg::clear_sender_public_key() {
  sender_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TransactionMsg::sender_public_key() const {
  // @@protoc_insertion_point(field_get:onevote.TransactionMsg.sender_public_key)
  return sender_public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionMsg::set_sender_public_key(const ::std::string& value) {

  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onevote.TransactionMsg.sender_public_key)
}
 void TransactionMsg::set_sender_public_key(const char* value) {

  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onevote.TransactionMsg.sender_public_key)
}
 void TransactionMsg::set_sender_public_key(const char* value, size_t size) {

  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onevote.TransactionMsg.sender_public_key)
}
 ::std::string* TransactionMsg::mutable_sender_public_key() {

  // @@protoc_insertion_point(field_mutable:onevote.TransactionMsg.sender_public_key)
  return sender_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionMsg::release_sender_public_key() {

  return sender_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionMsg::set_allocated_sender_public_key(::std::string* sender_public_key) {
  if (sender_public_key != NULL) {

  } else {

  }
  sender_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_public_key);
  // @@protoc_insertion_point(field_set_allocated:onevote.TransactionMsg.sender_public_key)
}

// optional string vote = 3;
void TransactionMsg::clear_vote() {
  vote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TransactionMsg::vote() const {
  // @@protoc_insertion_point(field_get:onevote.TransactionMsg.vote)
  return vote_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionMsg::set_vote(const ::std::string& value) {

  vote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onevote.TransactionMsg.vote)
}
 void TransactionMsg::set_vote(const char* value) {

  vote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onevote.TransactionMsg.vote)
}
 void TransactionMsg::set_vote(const char* value, size_t size) {

  vote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onevote.TransactionMsg.vote)
}
 ::std::string* TransactionMsg::mutable_vote() {

  // @@protoc_insertion_point(field_mutable:onevote.TransactionMsg.vote)
  return vote_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionMsg::release_vote() {

  return vote_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionMsg::set_allocated_vote(::std::string* vote) {
  if (vote != NULL) {

  } else {

  }
  vote_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vote);
  // @@protoc_insertion_point(field_set_allocated:onevote.TransactionMsg.vote)
}

// optional double timestamp = 4;
void TransactionMsg::clear_timestamp() {
  timestamp_ = 0;
}
 double TransactionMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:onevote.TransactionMsg.timestamp)
  return timestamp_;
}
 void TransactionMsg::set_timestamp(double value) {

  timestamp_ = value;
  // @@protoc_insertion_point(field_set:onevote.TransactionMsg.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddrRequest::kNumRequestedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddrRequest::AddrRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:onevote.AddrRequest)
}

void AddrRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AddrRequest::AddrRequest(const AddrRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onevote.AddrRequest)
}

void AddrRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  num_requested_ = 0u;
}

AddrRequest::~AddrRequest() {
  // @@protoc_insertion_point(destructor:onevote.AddrRequest)
  SharedDtor();
}

void AddrRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddrRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddrRequest_descriptor_;
}

const AddrRequest& AddrRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

AddrRequest* AddrRequest::default_instance_ = NULL;

AddrRequest* AddrRequest::New(::google::protobuf::Arena* arena) const {
  AddrRequest* n = new AddrRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddrRequest::Clear() {
  num_requested_ = 0u;
}

bool AddrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onevote.AddrRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_requested = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_requested_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onevote.AddrRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onevote.AddrRequest)
  return false;
#undef DO_
}

void AddrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onevote.AddrRequest)
  // optional uint32 num_requested = 1;
  if (this->num_requested() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_requested(), output);
  }

  // @@protoc_insertion_point(serialize_end:onevote.AddrRequest)
}

::google::protobuf::uint8* AddrRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:onevote.AddrRequest)
  // optional uint32 num_requested = 1;
  if (this->num_requested() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_requested(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:onevote.AddrRequest)
  return target;
}

int AddrRequest::ByteSize() const {
  int total_size = 0;

  // optional uint32 num_requested = 1;
  if (this->num_requested() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_requested());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddrRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddrRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddrRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddrRequest::MergeFrom(const AddrRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.num_requested() != 0) {
    set_num_requested(from.num_requested());
  }
}

void AddrRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddrRequest::CopyFrom(const AddrRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddrRequest::IsInitialized() const {

  return true;
}

void AddrRequest::Swap(AddrRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddrRequest::InternalSwap(AddrRequest* other) {
  std::swap(num_requested_, other->num_requested_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddrRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddrRequest_descriptor_;
  metadata.reflection = AddrRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddrRequest

// optional uint32 num_requested = 1;
void AddrRequest::clear_num_requested() {
  num_requested_ = 0u;
}
 ::google::protobuf::uint32 AddrRequest::num_requested() const {
  // @@protoc_insertion_point(field_get:onevote.AddrRequest.num_requested)
  return num_requested_;
}
 void AddrRequest::set_num_requested(::google::protobuf::uint32 value) {

  num_requested_ = value;
  // @@protoc_insertion_point(field_set:onevote.AddrRequest.num_requested)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddrResponse::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddrResponse::AddrResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:onevote.AddrResponse)
}

void AddrResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AddrResponse::AddrResponse(const AddrResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onevote.AddrResponse)
}

void AddrResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

AddrResponse::~AddrResponse() {
  // @@protoc_insertion_point(destructor:onevote.AddrResponse)
  SharedDtor();
}

void AddrResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddrResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddrResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddrResponse_descriptor_;
}

const AddrResponse& AddrResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

AddrResponse* AddrResponse::default_instance_ = NULL;

AddrResponse* AddrResponse::New(::google::protobuf::Arena* arena) const {
  AddrResponse* n = new AddrResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddrResponse::Clear() {
  peer_.Clear();
}

bool AddrResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onevote.AddrResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string peer = 1;
      case 1: {
        if (tag == 10) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peer(this->peer_size() - 1).data(),
            this->peer(this->peer_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onevote.AddrResponse.peer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_peer;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onevote.AddrResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onevote.AddrResponse)
  return false;
#undef DO_
}

void AddrResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onevote.AddrResponse)
  // repeated string peer = 1;
  for (int i = 0; i < this->peer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer(i).data(), this->peer(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onevote.AddrResponse.peer");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->peer(i), output);
  }

  // @@protoc_insertion_point(serialize_end:onevote.AddrResponse)
}

::google::protobuf::uint8* AddrResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:onevote.AddrResponse)
  // repeated string peer = 1;
  for (int i = 0; i < this->peer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer(i).data(), this->peer(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onevote.AddrResponse.peer");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->peer(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:onevote.AddrResponse)
  return target;
}

int AddrResponse::ByteSize() const {
  int total_size = 0;

  // repeated string peer = 1;
  total_size += 1 * this->peer_size();
  for (int i = 0; i < this->peer_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peer(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddrResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddrResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddrResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddrResponse::MergeFrom(const AddrResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  peer_.MergeFrom(from.peer_);
}

void AddrResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddrResponse::CopyFrom(const AddrResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddrResponse::IsInitialized() const {

  return true;
}

void AddrResponse::Swap(AddrResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddrResponse::InternalSwap(AddrResponse* other) {
  peer_.UnsafeArenaSwap(&other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddrResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddrResponse_descriptor_;
  metadata.reflection = AddrResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddrResponse

// repeated string peer = 1;
int AddrResponse::peer_size() const {
  return peer_.size();
}
void AddrResponse::clear_peer() {
  peer_.Clear();
}
 const ::std::string& AddrResponse::peer(int index) const {
  // @@protoc_insertion_point(field_get:onevote.AddrResponse.peer)
  return peer_.Get(index);
}
 ::std::string* AddrResponse::mutable_peer(int index) {
  // @@protoc_insertion_point(field_mutable:onevote.AddrResponse.peer)
  return peer_.Mutable(index);
}
 void AddrResponse::set_peer(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onevote.AddrResponse.peer)
  peer_.Mutable(index)->assign(value);
}
 void AddrResponse::set_peer(int index, const char* value) {
  peer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onevote.AddrResponse.peer)
}
 void AddrResponse::set_peer(int index, const char* value, size_t size) {
  peer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onevote.AddrResponse.peer)
}
 ::std::string* AddrResponse::add_peer() {
  return peer_.Add();
}
 void AddrResponse::add_peer(const ::std::string& value) {
  peer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onevote.AddrResponse.peer)
}
 void AddrResponse::add_peer(const char* value) {
  peer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onevote.AddrResponse.peer)
}
 void AddrResponse::add_peer(const char* value, size_t size) {
  peer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onevote.AddrResponse.peer)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddrResponse::peer() const {
  // @@protoc_insertion_point(field_list:onevote.AddrResponse.peer)
  return peer_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
AddrResponse::mutable_peer() {
  // @@protoc_insertion_point(field_mutable_list:onevote.AddrResponse.peer)
  return &peer_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionRequest::kPublickeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionRequest::TransactionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:onevote.TransactionRequest)
}

void TransactionRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TransactionRequest::TransactionRequest(const TransactionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onevote.TransactionRequest)
}

void TransactionRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  publickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TransactionRequest::~TransactionRequest() {
  // @@protoc_insertion_point(destructor:onevote.TransactionRequest)
  SharedDtor();
}

void TransactionRequest::SharedDtor() {
  publickey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransactionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionRequest_descriptor_;
}

const TransactionRequest& TransactionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

TransactionRequest* TransactionRequest::default_instance_ = NULL;

TransactionRequest* TransactionRequest::New(::google::protobuf::Arena* arena) const {
  TransactionRequest* n = new TransactionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionRequest::Clear() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TransactionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onevote.TransactionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string publickey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publickey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publickey().data(), this->publickey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onevote.TransactionRequest.publickey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onevote.TransactionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onevote.TransactionRequest)
  return false;
#undef DO_
}

void TransactionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onevote.TransactionRequest)
  // optional string publickey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onevote.TransactionRequest.publickey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->publickey(), output);
  }

  // @@protoc_insertion_point(serialize_end:onevote.TransactionRequest)
}

::google::protobuf::uint8* TransactionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:onevote.TransactionRequest)
  // optional string publickey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onevote.TransactionRequest.publickey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->publickey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:onevote.TransactionRequest)
  return target;
}

int TransactionRequest::ByteSize() const {
  int total_size = 0;

  // optional string publickey = 1;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publickey());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionRequest::MergeFrom(const TransactionRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
}

void TransactionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionRequest::CopyFrom(const TransactionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRequest::IsInitialized() const {

  return true;
}

void TransactionRequest::Swap(TransactionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionRequest::InternalSwap(TransactionRequest* other) {
  publickey_.Swap(&other->publickey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionRequest_descriptor_;
  metadata.reflection = TransactionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionRequest

// optional string publickey = 1;
void TransactionRequest::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TransactionRequest::publickey() const {
  // @@protoc_insertion_point(field_get:onevote.TransactionRequest.publickey)
  return publickey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionRequest::set_publickey(const ::std::string& value) {

  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onevote.TransactionRequest.publickey)
}
 void TransactionRequest::set_publickey(const char* value) {

  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onevote.TransactionRequest.publickey)
}
 void TransactionRequest::set_publickey(const char* value, size_t size) {

  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onevote.TransactionRequest.publickey)
}
 ::std::string* TransactionRequest::mutable_publickey() {

  // @@protoc_insertion_point(field_mutable:onevote.TransactionRequest.publickey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionRequest::release_publickey() {

  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionRequest::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {

  } else {

  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:onevote.TransactionRequest.publickey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockRequest::kBlockNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockRequest::BlockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:onevote.BlockRequest)
}

void BlockRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BlockRequest::BlockRequest(const BlockRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onevote.BlockRequest)
}

void BlockRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  block_number_ = 0u;
}

BlockRequest::~BlockRequest() {
  // @@protoc_insertion_point(destructor:onevote.BlockRequest)
  SharedDtor();
}

void BlockRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockRequest_descriptor_;
}

const BlockRequest& BlockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

BlockRequest* BlockRequest::default_instance_ = NULL;

BlockRequest* BlockRequest::New(::google::protobuf::Arena* arena) const {
  BlockRequest* n = new BlockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockRequest::Clear() {
  block_number_ = 0u;
}

bool BlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onevote.BlockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 block_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onevote.BlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onevote.BlockRequest)
  return false;
#undef DO_
}

void BlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onevote.BlockRequest)
  // optional uint32 block_number = 1;
  if (this->block_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->block_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:onevote.BlockRequest)
}

::google::protobuf::uint8* BlockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:onevote.BlockRequest)
  // optional uint32 block_number = 1;
  if (this->block_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->block_number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:onevote.BlockRequest)
  return target;
}

int BlockRequest::ByteSize() const {
  int total_size = 0;

  // optional uint32 block_number = 1;
  if (this->block_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->block_number());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BlockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockRequest::MergeFrom(const BlockRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.block_number() != 0) {
    set_block_number(from.block_number());
  }
}

void BlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockRequest::CopyFrom(const BlockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRequest::IsInitialized() const {

  return true;
}

void BlockRequest::Swap(BlockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockRequest::InternalSwap(BlockRequest* other) {
  std::swap(block_number_, other->block_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockRequest_descriptor_;
  metadata.reflection = BlockRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockRequest

// optional uint32 block_number = 1;
void BlockRequest::clear_block_number() {
  block_number_ = 0u;
}
 ::google::protobuf::uint32 BlockRequest::block_number() const {
  // @@protoc_insertion_point(field_get:onevote.BlockRequest.block_number)
  return block_number_;
}
 void BlockRequest::set_block_number(::google::protobuf::uint32 value) {

  block_number_ = value;
  // @@protoc_insertion_point(field_set:onevote.BlockRequest.block_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace onevote

// @@protoc_insertion_point(global_scope)
