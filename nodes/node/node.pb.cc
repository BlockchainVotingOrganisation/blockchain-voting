// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "node.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EmptyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Success_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Success_reflection_ = NULL;
const ::google::protobuf::Descriptor* Block_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Block_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddrRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddrRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddrResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddrResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_node_2eproto() {
  protobuf_AddDesc_node_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "node.proto");
  GOOGLE_CHECK(file != NULL);
  EmptyRequest_descriptor_ = file->message_type(0);
  static const int EmptyRequest_offsets_[1] = {
  };
  EmptyRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EmptyRequest_descriptor_,
      EmptyRequest::default_instance_,
      EmptyRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(EmptyRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyRequest, _is_default_instance_));
  Success_descriptor_ = file->message_type(1);
  static const int Success_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Success, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Success, message_),
  };
  Success_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Success_descriptor_,
      Success::default_instance_,
      Success_offsets_,
      -1,
      -1,
      -1,
      sizeof(Success),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Success, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Success, _is_default_instance_));
  Block_descriptor_ = file->message_type(2);
  static const int Block_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, block_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, prev_block_sha1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, merkle_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, num_transactions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, verifier_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, final_hash_),
  };
  Block_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Block_descriptor_,
      Block::default_instance_,
      Block_offsets_,
      -1,
      -1,
      -1,
      sizeof(Block),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _is_default_instance_));
  Transaction_descriptor_ = file->message_type(3);
  static const int Transaction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, sender_public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, vote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, timestamp_),
  };
  Transaction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transaction_descriptor_,
      Transaction::default_instance_,
      Transaction_offsets_,
      -1,
      -1,
      -1,
      sizeof(Transaction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _is_default_instance_));
  AddrRequest_descriptor_ = file->message_type(4);
  static const int AddrRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrRequest, num_requested_),
  };
  AddrRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddrRequest_descriptor_,
      AddrRequest::default_instance_,
      AddrRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddrRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrRequest, _is_default_instance_));
  AddrResponse_descriptor_ = file->message_type(5);
  static const int AddrResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrResponse, peer_),
  };
  AddrResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddrResponse_descriptor_,
      AddrResponse::default_instance_,
      AddrResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddrResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrResponse, _is_default_instance_));
  TransactionRequest_descriptor_ = file->message_type(6);
  static const int TransactionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRequest, publickey_),
  };
  TransactionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionRequest_descriptor_,
      TransactionRequest::default_instance_,
      TransactionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransactionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRequest, _is_default_instance_));
  BlockRequest_descriptor_ = file->message_type(7);
  static const int BlockRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRequest, block_number_),
  };
  BlockRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlockRequest_descriptor_,
      BlockRequest::default_instance_,
      BlockRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(BlockRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockRequest, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_node_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EmptyRequest_descriptor_, &EmptyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Success_descriptor_, &Success::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Block_descriptor_, &Block::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transaction_descriptor_, &Transaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddrRequest_descriptor_, &AddrRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddrResponse_descriptor_, &AddrResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionRequest_descriptor_, &TransactionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlockRequest_descriptor_, &BlockRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_node_2eproto() {
  delete EmptyRequest::default_instance_;
  delete EmptyRequest_reflection_;
  delete Success::default_instance_;
  delete Success_reflection_;
  delete Block::default_instance_;
  delete Block_reflection_;
  delete Transaction::default_instance_;
  delete Transaction_reflection_;
  delete AddrRequest::default_instance_;
  delete AddrRequest_reflection_;
  delete AddrResponse::default_instance_;
  delete AddrResponse_reflection_;
  delete TransactionRequest::default_instance_;
  delete TransactionRequest_reflection_;
  delete BlockRequest::default_instance_;
  delete BlockRequest_reflection_;
}

void protobuf_AddDesc_node_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nnode.proto\"\016\n\014EmptyRequest\"+\n\007Success\022"
    "\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\"\310\001\n\005Bl"
    "ock\022\024\n\014block_number\030\010 \001(\r\022\027\n\017prev_block_"
    "SHA1\030\001 \001(\t\022\r\n\005magic\030\002 \001(\003\022\023\n\013merkle_root"
    "\030\003 \001(\t\022!\n\013transaction\030\004 \003(\0132\014.Transactio"
    "n\022\030\n\020num_transactions\030\005 \001(\r\022\033\n\023verifier_"
    "public_key\030\006 \001(\t\022\022\n\nfinal_hash\030\007 \001(\t\"I\n\013"
    "Transaction\022\031\n\021sender_public_key\030\002 \001(\t\022\014"
    "\n\004vote\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001(\001\"$\n\013AddrR"
    "equest\022\025\n\rnum_requested\030\001 \001(\r\"\034\n\014AddrRes"
    "ponse\022\014\n\004peer\030\001 \003(\t\"\'\n\022TransactionReques"
    "t\022\021\n\tpublickey\030\001 \001(\t\"$\n\014BlockRequest\022\024\n\014"
    "block_number\030\001 \001(\r2\220\002\n\005Miner\022$\n\016Broadcas"
    "tBlock\022\006.Block\032\010.Success\"\000\0220\n\024BroadcastT"
    "ransaction\022\014.Transaction\032\010.Success\"\000\022(\n\007"
    "GetAddr\022\014.AddrRequest\032\r.AddrResponse\"\000\0225"
    "\n\016GetTransaction\022\023.TransactionRequest\032\014."
    "Transaction\"\000\022#\n\010GetBlock\022\r.BlockRequest"
    "\032\006.Block\"\000\022)\n\014GetHeartbeat\022\r.EmptyReques"
    "t\032\010.Success\"\000b\006proto3", 781);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "node.proto", &protobuf_RegisterTypes);
  EmptyRequest::default_instance_ = new EmptyRequest();
  Success::default_instance_ = new Success();
  Block::default_instance_ = new Block();
  Transaction::default_instance_ = new Transaction();
  AddrRequest::default_instance_ = new AddrRequest();
  AddrResponse::default_instance_ = new AddrResponse();
  TransactionRequest::default_instance_ = new TransactionRequest();
  BlockRequest::default_instance_ = new BlockRequest();
  EmptyRequest::default_instance_->InitAsDefaultInstance();
  Success::default_instance_->InitAsDefaultInstance();
  Block::default_instance_->InitAsDefaultInstance();
  Transaction::default_instance_->InitAsDefaultInstance();
  AddrRequest::default_instance_->InitAsDefaultInstance();
  AddrResponse::default_instance_->InitAsDefaultInstance();
  TransactionRequest::default_instance_->InitAsDefaultInstance();
  BlockRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_node_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_node_2eproto {
  StaticDescriptorInitializer_node_2eproto() {
    protobuf_AddDesc_node_2eproto();
  }
} static_descriptor_initializer_node_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmptyRequest::EmptyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EmptyRequest)
}

void EmptyRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EmptyRequest::EmptyRequest(const EmptyRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EmptyRequest)
}

void EmptyRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

EmptyRequest::~EmptyRequest() {
  // @@protoc_insertion_point(destructor:EmptyRequest)
  SharedDtor();
}

void EmptyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyRequest_descriptor_;
}

const EmptyRequest& EmptyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

EmptyRequest* EmptyRequest::default_instance_ = NULL;

EmptyRequest* EmptyRequest::New(::google::protobuf::Arena* arena) const {
  EmptyRequest* n = new EmptyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmptyRequest::Clear() {
}

bool EmptyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EmptyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:EmptyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EmptyRequest)
  return false;
#undef DO_
}

void EmptyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EmptyRequest)
  // @@protoc_insertion_point(serialize_end:EmptyRequest)
}

::google::protobuf::uint8* EmptyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EmptyRequest)
  // @@protoc_insertion_point(serialize_to_array_end:EmptyRequest)
  return target;
}

int EmptyRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EmptyRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EmptyRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyRequest::MergeFrom(const EmptyRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void EmptyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyRequest::CopyFrom(const EmptyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyRequest::IsInitialized() const {

  return true;
}

void EmptyRequest::Swap(EmptyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmptyRequest::InternalSwap(EmptyRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmptyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyRequest_descriptor_;
  metadata.reflection = EmptyRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmptyRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Success::kSuccessFieldNumber;
const int Success::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Success::Success()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Success)
}

void Success::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Success::Success(const Success& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Success)
}

void Success::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = false;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Success::~Success() {
  // @@protoc_insertion_point(destructor:Success)
  SharedDtor();
}

void Success::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Success::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Success::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Success_descriptor_;
}

const Success& Success::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

Success* Success::default_instance_ = NULL;

Success* Success::New(::google::protobuf::Arena* arena) const {
  Success* n = new Success;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Success::Clear() {
  success_ = false;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Success::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Success)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Success.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Success)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Success)
  return false;
#undef DO_
}

void Success::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Success)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Success.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:Success)
}

::google::protobuf::uint8* Success::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Success)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Success.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Success)
  return target;
}

int Success::ByteSize() const {
  int total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Success::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Success* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Success>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Success::MergeFrom(const Success& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Success::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Success::CopyFrom(const Success& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Success::IsInitialized() const {

  return true;
}

void Success::Swap(Success* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Success::InternalSwap(Success* other) {
  std::swap(success_, other->success_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Success::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Success_descriptor_;
  metadata.reflection = Success_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Success

// optional bool success = 1;
void Success::clear_success() {
  success_ = false;
}
 bool Success::success() const {
  // @@protoc_insertion_point(field_get:Success.success)
  return success_;
}
 void Success::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:Success.success)
}

// optional string message = 2;
void Success::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Success::message() const {
  // @@protoc_insertion_point(field_get:Success.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Success::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Success.message)
}
 void Success::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Success.message)
}
 void Success::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Success.message)
}
 ::std::string* Success::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Success.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Success::release_message() {
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Success::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Success.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Block::kBlockNumberFieldNumber;
const int Block::kPrevBlockSHA1FieldNumber;
const int Block::kMagicFieldNumber;
const int Block::kMerkleRootFieldNumber;
const int Block::kTransactionFieldNumber;
const int Block::kNumTransactionsFieldNumber;
const int Block::kVerifierPublicKeyFieldNumber;
const int Block::kFinalHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Block::Block()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Block)
}

void Block::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Block::Block(const Block& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Block)
}

void Block::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  block_number_ = 0u;
  prev_block_sha1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  magic_ = GOOGLE_LONGLONG(0);
  merkle_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_transactions_ = 0u;
  verifier_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:Block)
  SharedDtor();
}

void Block::SharedDtor() {
  prev_block_sha1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_root_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifier_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Block_descriptor_;
}

const Block& Block::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

Block* Block::default_instance_ = NULL;

Block* Block::New(::google::protobuf::Arena* arena) const {
  Block* n = new Block;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Block::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Block*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(magic_, num_transactions_);
  prev_block_sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkle_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifier_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  final_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  transaction_.Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Block)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string prev_block_SHA1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_block_sha1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prev_block_sha1().data(), this->prev_block_sha1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Block.prev_block_SHA1"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_magic;
        break;
      }

      // optional int64 magic = 2;
      case 2: {
        if (tag == 16) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &magic_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_merkle_root;
        break;
      }

      // optional string merkle_root = 3;
      case 3: {
        if (tag == 26) {
         parse_merkle_root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_merkle_root()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->merkle_root().data(), this->merkle_root().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Block.merkle_root"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transaction;
        break;
      }

      // repeated .Transaction transaction = 4;
      case 4: {
        if (tag == 34) {
         parse_transaction:
          DO_(input->IncrementRecursionDepth());
         parse_loop_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_transaction;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_num_transactions;
        break;
      }

      // optional uint32 num_transactions = 5;
      case 5: {
        if (tag == 40) {
         parse_num_transactions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_transactions_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_verifier_public_key;
        break;
      }

      // optional string verifier_public_key = 6;
      case 6: {
        if (tag == 50) {
         parse_verifier_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifier_public_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verifier_public_key().data(), this->verifier_public_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Block.verifier_public_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_final_hash;
        break;
      }

      // optional string final_hash = 7;
      case 7: {
        if (tag == 58) {
         parse_final_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_final_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->final_hash().data(), this->final_hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Block.final_hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_block_number;
        break;
      }

      // optional uint32 block_number = 8;
      case 8: {
        if (tag == 64) {
         parse_block_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Block)
  return false;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Block)
  // optional string prev_block_SHA1 = 1;
  if (this->prev_block_sha1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_block_sha1().data(), this->prev_block_sha1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Block.prev_block_SHA1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->prev_block_sha1(), output);
  }

  // optional int64 magic = 2;
  if (this->magic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->magic(), output);
  }

  // optional string merkle_root = 3;
  if (this->merkle_root().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->merkle_root().data(), this->merkle_root().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Block.merkle_root");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->merkle_root(), output);
  }

  // repeated .Transaction transaction = 4;
  for (unsigned int i = 0, n = this->transaction_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->transaction(i), output);
  }

  // optional uint32 num_transactions = 5;
  if (this->num_transactions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_transactions(), output);
  }

  // optional string verifier_public_key = 6;
  if (this->verifier_public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verifier_public_key().data(), this->verifier_public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Block.verifier_public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->verifier_public_key(), output);
  }

  // optional string final_hash = 7;
  if (this->final_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->final_hash().data(), this->final_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Block.final_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->final_hash(), output);
  }

  // optional uint32 block_number = 8;
  if (this->block_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->block_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:Block)
}

::google::protobuf::uint8* Block::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Block)
  // optional string prev_block_SHA1 = 1;
  if (this->prev_block_sha1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prev_block_sha1().data(), this->prev_block_sha1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Block.prev_block_SHA1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prev_block_sha1(), target);
  }

  // optional int64 magic = 2;
  if (this->magic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->magic(), target);
  }

  // optional string merkle_root = 3;
  if (this->merkle_root().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->merkle_root().data(), this->merkle_root().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Block.merkle_root");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->merkle_root(), target);
  }

  // repeated .Transaction transaction = 4;
  for (unsigned int i = 0, n = this->transaction_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->transaction(i), target);
  }

  // optional uint32 num_transactions = 5;
  if (this->num_transactions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_transactions(), target);
  }

  // optional string verifier_public_key = 6;
  if (this->verifier_public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verifier_public_key().data(), this->verifier_public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Block.verifier_public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->verifier_public_key(), target);
  }

  // optional string final_hash = 7;
  if (this->final_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->final_hash().data(), this->final_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Block.final_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->final_hash(), target);
  }

  // optional uint32 block_number = 8;
  if (this->block_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->block_number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Block)
  return target;
}

int Block::ByteSize() const {
  int total_size = 0;

  // optional uint32 block_number = 8;
  if (this->block_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->block_number());
  }

  // optional string prev_block_SHA1 = 1;
  if (this->prev_block_sha1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prev_block_sha1());
  }

  // optional int64 magic = 2;
  if (this->magic() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->magic());
  }

  // optional string merkle_root = 3;
  if (this->merkle_root().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->merkle_root());
  }

  // optional uint32 num_transactions = 5;
  if (this->num_transactions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_transactions());
  }

  // optional string verifier_public_key = 6;
  if (this->verifier_public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->verifier_public_key());
  }

  // optional string final_hash = 7;
  if (this->final_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->final_hash());
  }

  // repeated .Transaction transaction = 4;
  total_size += 1 * this->transaction_size();
  for (int i = 0; i < this->transaction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transaction(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Block* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Block>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  transaction_.MergeFrom(from.transaction_);
  if (from.block_number() != 0) {
    set_block_number(from.block_number());
  }
  if (from.prev_block_sha1().size() > 0) {

    prev_block_sha1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prev_block_sha1_);
  }
  if (from.magic() != 0) {
    set_magic(from.magic());
  }
  if (from.merkle_root().size() > 0) {

    merkle_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkle_root_);
  }
  if (from.num_transactions() != 0) {
    set_num_transactions(from.num_transactions());
  }
  if (from.verifier_public_key().size() > 0) {

    verifier_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifier_public_key_);
  }
  if (from.final_hash().size() > 0) {

    final_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.final_hash_);
  }
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {

  return true;
}

void Block::Swap(Block* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Block::InternalSwap(Block* other) {
  std::swap(block_number_, other->block_number_);
  prev_block_sha1_.Swap(&other->prev_block_sha1_);
  std::swap(magic_, other->magic_);
  merkle_root_.Swap(&other->merkle_root_);
  transaction_.UnsafeArenaSwap(&other->transaction_);
  std::swap(num_transactions_, other->num_transactions_);
  verifier_public_key_.Swap(&other->verifier_public_key_);
  final_hash_.Swap(&other->final_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Block_descriptor_;
  metadata.reflection = Block_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Block

// optional uint32 block_number = 8;
void Block::clear_block_number() {
  block_number_ = 0u;
}
 ::google::protobuf::uint32 Block::block_number() const {
  // @@protoc_insertion_point(field_get:Block.block_number)
  return block_number_;
}
 void Block::set_block_number(::google::protobuf::uint32 value) {
  
  block_number_ = value;
  // @@protoc_insertion_point(field_set:Block.block_number)
}

// optional string prev_block_SHA1 = 1;
void Block::clear_prev_block_sha1() {
  prev_block_sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Block::prev_block_sha1() const {
  // @@protoc_insertion_point(field_get:Block.prev_block_SHA1)
  return prev_block_sha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Block::set_prev_block_sha1(const ::std::string& value) {
  
  prev_block_sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Block.prev_block_SHA1)
}
 void Block::set_prev_block_sha1(const char* value) {
  
  prev_block_sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Block.prev_block_SHA1)
}
 void Block::set_prev_block_sha1(const char* value, size_t size) {
  
  prev_block_sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Block.prev_block_SHA1)
}
 ::std::string* Block::mutable_prev_block_sha1() {
  
  // @@protoc_insertion_point(field_mutable:Block.prev_block_SHA1)
  return prev_block_sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Block::release_prev_block_sha1() {
  
  return prev_block_sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Block::set_allocated_prev_block_sha1(::std::string* prev_block_sha1) {
  if (prev_block_sha1 != NULL) {
    
  } else {
    
  }
  prev_block_sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_block_sha1);
  // @@protoc_insertion_point(field_set_allocated:Block.prev_block_SHA1)
}

// optional int64 magic = 2;
void Block::clear_magic() {
  magic_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Block::magic() const {
  // @@protoc_insertion_point(field_get:Block.magic)
  return magic_;
}
 void Block::set_magic(::google::protobuf::int64 value) {
  
  magic_ = value;
  // @@protoc_insertion_point(field_set:Block.magic)
}

// optional string merkle_root = 3;
void Block::clear_merkle_root() {
  merkle_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Block::merkle_root() const {
  // @@protoc_insertion_point(field_get:Block.merkle_root)
  return merkle_root_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Block::set_merkle_root(const ::std::string& value) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Block.merkle_root)
}
 void Block::set_merkle_root(const char* value) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Block.merkle_root)
}
 void Block::set_merkle_root(const char* value, size_t size) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Block.merkle_root)
}
 ::std::string* Block::mutable_merkle_root() {
  
  // @@protoc_insertion_point(field_mutable:Block.merkle_root)
  return merkle_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Block::release_merkle_root() {
  
  return merkle_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Block::set_allocated_merkle_root(::std::string* merkle_root) {
  if (merkle_root != NULL) {
    
  } else {
    
  }
  merkle_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkle_root);
  // @@protoc_insertion_point(field_set_allocated:Block.merkle_root)
}

// repeated .Transaction transaction = 4;
int Block::transaction_size() const {
  return transaction_.size();
}
void Block::clear_transaction() {
  transaction_.Clear();
}
const ::Transaction& Block::transaction(int index) const {
  // @@protoc_insertion_point(field_get:Block.transaction)
  return transaction_.Get(index);
}
::Transaction* Block::mutable_transaction(int index) {
  // @@protoc_insertion_point(field_mutable:Block.transaction)
  return transaction_.Mutable(index);
}
::Transaction* Block::add_transaction() {
  // @@protoc_insertion_point(field_add:Block.transaction)
  return transaction_.Add();
}
::google::protobuf::RepeatedPtrField< ::Transaction >*
Block::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable_list:Block.transaction)
  return &transaction_;
}
const ::google::protobuf::RepeatedPtrField< ::Transaction >&
Block::transaction() const {
  // @@protoc_insertion_point(field_list:Block.transaction)
  return transaction_;
}

// optional uint32 num_transactions = 5;
void Block::clear_num_transactions() {
  num_transactions_ = 0u;
}
 ::google::protobuf::uint32 Block::num_transactions() const {
  // @@protoc_insertion_point(field_get:Block.num_transactions)
  return num_transactions_;
}
 void Block::set_num_transactions(::google::protobuf::uint32 value) {
  
  num_transactions_ = value;
  // @@protoc_insertion_point(field_set:Block.num_transactions)
}

// optional string verifier_public_key = 6;
void Block::clear_verifier_public_key() {
  verifier_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Block::verifier_public_key() const {
  // @@protoc_insertion_point(field_get:Block.verifier_public_key)
  return verifier_public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Block::set_verifier_public_key(const ::std::string& value) {
  
  verifier_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Block.verifier_public_key)
}
 void Block::set_verifier_public_key(const char* value) {
  
  verifier_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Block.verifier_public_key)
}
 void Block::set_verifier_public_key(const char* value, size_t size) {
  
  verifier_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Block.verifier_public_key)
}
 ::std::string* Block::mutable_verifier_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Block.verifier_public_key)
  return verifier_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Block::release_verifier_public_key() {
  
  return verifier_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Block::set_allocated_verifier_public_key(::std::string* verifier_public_key) {
  if (verifier_public_key != NULL) {
    
  } else {
    
  }
  verifier_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifier_public_key);
  // @@protoc_insertion_point(field_set_allocated:Block.verifier_public_key)
}

// optional string final_hash = 7;
void Block::clear_final_hash() {
  final_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Block::final_hash() const {
  // @@protoc_insertion_point(field_get:Block.final_hash)
  return final_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Block::set_final_hash(const ::std::string& value) {
  
  final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Block.final_hash)
}
 void Block::set_final_hash(const char* value) {
  
  final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Block.final_hash)
}
 void Block::set_final_hash(const char* value, size_t size) {
  
  final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Block.final_hash)
}
 ::std::string* Block::mutable_final_hash() {
  
  // @@protoc_insertion_point(field_mutable:Block.final_hash)
  return final_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Block::release_final_hash() {
  
  return final_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Block::set_allocated_final_hash(::std::string* final_hash) {
  if (final_hash != NULL) {
    
  } else {
    
  }
  final_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), final_hash);
  // @@protoc_insertion_point(field_set_allocated:Block.final_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kSenderPublicKeyFieldNumber;
const int Transaction::kVoteFieldNumber;
const int Transaction::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Transaction)
}

void Transaction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Transaction)
}

void Transaction::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sender_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vote_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  sender_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vote_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transaction_descriptor_;
}

const Transaction& Transaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

Transaction* Transaction::default_instance_ = NULL;

Transaction* Transaction::New(::google::protobuf::Arena* arena) const {
  Transaction* n = new Transaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transaction::Clear() {
  sender_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Transaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sender_public_key = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_public_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender_public_key().data(), this->sender_public_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Transaction.sender_public_key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vote;
        break;
      }

      // optional string vote = 3;
      case 3: {
        if (tag == 26) {
         parse_vote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vote()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vote().data(), this->vote().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Transaction.vote"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 4;
      case 4: {
        if (tag == 33) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Transaction)
  // optional string sender_public_key = 2;
  if (this->sender_public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_public_key().data(), this->sender_public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Transaction.sender_public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sender_public_key(), output);
  }

  // optional string vote = 3;
  if (this->vote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vote().data(), this->vote().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Transaction.vote");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vote(), output);
  }

  // optional double timestamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:Transaction)
}

::google::protobuf::uint8* Transaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Transaction)
  // optional string sender_public_key = 2;
  if (this->sender_public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_public_key().data(), this->sender_public_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Transaction.sender_public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sender_public_key(), target);
  }

  // optional string vote = 3;
  if (this->vote().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vote().data(), this->vote().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Transaction.vote");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vote(), target);
  }

  // optional double timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Transaction)
  return target;
}

int Transaction::ByteSize() const {
  int total_size = 0;

  // optional string sender_public_key = 2;
  if (this->sender_public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender_public_key());
  }

  // optional string vote = 3;
  if (this->vote().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vote());
  }

  // optional double timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Transaction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Transaction>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.sender_public_key().size() > 0) {

    sender_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_public_key_);
  }
  if (from.vote().size() > 0) {

    vote_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vote_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {

  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  sender_public_key_.Swap(&other->sender_public_key_);
  vote_.Swap(&other->vote_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transaction_descriptor_;
  metadata.reflection = Transaction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transaction

// optional string sender_public_key = 2;
void Transaction::clear_sender_public_key() {
  sender_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Transaction::sender_public_key() const {
  // @@protoc_insertion_point(field_get:Transaction.sender_public_key)
  return sender_public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_sender_public_key(const ::std::string& value) {
  
  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transaction.sender_public_key)
}
 void Transaction::set_sender_public_key(const char* value) {
  
  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transaction.sender_public_key)
}
 void Transaction::set_sender_public_key(const char* value, size_t size) {
  
  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transaction.sender_public_key)
}
 ::std::string* Transaction::mutable_sender_public_key() {
  
  // @@protoc_insertion_point(field_mutable:Transaction.sender_public_key)
  return sender_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transaction::release_sender_public_key() {
  
  return sender_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_allocated_sender_public_key(::std::string* sender_public_key) {
  if (sender_public_key != NULL) {
    
  } else {
    
  }
  sender_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_public_key);
  // @@protoc_insertion_point(field_set_allocated:Transaction.sender_public_key)
}

// optional string vote = 3;
void Transaction::clear_vote() {
  vote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Transaction::vote() const {
  // @@protoc_insertion_point(field_get:Transaction.vote)
  return vote_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_vote(const ::std::string& value) {
  
  vote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transaction.vote)
}
 void Transaction::set_vote(const char* value) {
  
  vote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transaction.vote)
}
 void Transaction::set_vote(const char* value, size_t size) {
  
  vote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transaction.vote)
}
 ::std::string* Transaction::mutable_vote() {
  
  // @@protoc_insertion_point(field_mutable:Transaction.vote)
  return vote_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transaction::release_vote() {
  
  return vote_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_allocated_vote(::std::string* vote) {
  if (vote != NULL) {
    
  } else {
    
  }
  vote_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vote);
  // @@protoc_insertion_point(field_set_allocated:Transaction.vote)
}

// optional double timestamp = 4;
void Transaction::clear_timestamp() {
  timestamp_ = 0;
}
 double Transaction::timestamp() const {
  // @@protoc_insertion_point(field_get:Transaction.timestamp)
  return timestamp_;
}
 void Transaction::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Transaction.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddrRequest::kNumRequestedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddrRequest::AddrRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddrRequest)
}

void AddrRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AddrRequest::AddrRequest(const AddrRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AddrRequest)
}

void AddrRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  num_requested_ = 0u;
}

AddrRequest::~AddrRequest() {
  // @@protoc_insertion_point(destructor:AddrRequest)
  SharedDtor();
}

void AddrRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddrRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddrRequest_descriptor_;
}

const AddrRequest& AddrRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

AddrRequest* AddrRequest::default_instance_ = NULL;

AddrRequest* AddrRequest::New(::google::protobuf::Arena* arena) const {
  AddrRequest* n = new AddrRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddrRequest::Clear() {
  num_requested_ = 0u;
}

bool AddrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AddrRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_requested = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_requested_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AddrRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AddrRequest)
  return false;
#undef DO_
}

void AddrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AddrRequest)
  // optional uint32 num_requested = 1;
  if (this->num_requested() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_requested(), output);
  }

  // @@protoc_insertion_point(serialize_end:AddrRequest)
}

::google::protobuf::uint8* AddrRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddrRequest)
  // optional uint32 num_requested = 1;
  if (this->num_requested() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_requested(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:AddrRequest)
  return target;
}

int AddrRequest::ByteSize() const {
  int total_size = 0;

  // optional uint32 num_requested = 1;
  if (this->num_requested() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_requested());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddrRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddrRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddrRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddrRequest::MergeFrom(const AddrRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.num_requested() != 0) {
    set_num_requested(from.num_requested());
  }
}

void AddrRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddrRequest::CopyFrom(const AddrRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddrRequest::IsInitialized() const {

  return true;
}

void AddrRequest::Swap(AddrRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddrRequest::InternalSwap(AddrRequest* other) {
  std::swap(num_requested_, other->num_requested_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddrRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddrRequest_descriptor_;
  metadata.reflection = AddrRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddrRequest

// optional uint32 num_requested = 1;
void AddrRequest::clear_num_requested() {
  num_requested_ = 0u;
}
 ::google::protobuf::uint32 AddrRequest::num_requested() const {
  // @@protoc_insertion_point(field_get:AddrRequest.num_requested)
  return num_requested_;
}
 void AddrRequest::set_num_requested(::google::protobuf::uint32 value) {
  
  num_requested_ = value;
  // @@protoc_insertion_point(field_set:AddrRequest.num_requested)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddrResponse::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddrResponse::AddrResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddrResponse)
}

void AddrResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AddrResponse::AddrResponse(const AddrResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AddrResponse)
}

void AddrResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

AddrResponse::~AddrResponse() {
  // @@protoc_insertion_point(destructor:AddrResponse)
  SharedDtor();
}

void AddrResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddrResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddrResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddrResponse_descriptor_;
}

const AddrResponse& AddrResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

AddrResponse* AddrResponse::default_instance_ = NULL;

AddrResponse* AddrResponse::New(::google::protobuf::Arena* arena) const {
  AddrResponse* n = new AddrResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddrResponse::Clear() {
  peer_.Clear();
}

bool AddrResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AddrResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string peer = 1;
      case 1: {
        if (tag == 10) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peer(this->peer_size() - 1).data(),
            this->peer(this->peer_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AddrResponse.peer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_peer;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AddrResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AddrResponse)
  return false;
#undef DO_
}

void AddrResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AddrResponse)
  // repeated string peer = 1;
  for (int i = 0; i < this->peer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer(i).data(), this->peer(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AddrResponse.peer");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->peer(i), output);
  }

  // @@protoc_insertion_point(serialize_end:AddrResponse)
}

::google::protobuf::uint8* AddrResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddrResponse)
  // repeated string peer = 1;
  for (int i = 0; i < this->peer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer(i).data(), this->peer(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AddrResponse.peer");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->peer(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:AddrResponse)
  return target;
}

int AddrResponse::ByteSize() const {
  int total_size = 0;

  // repeated string peer = 1;
  total_size += 1 * this->peer_size();
  for (int i = 0; i < this->peer_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peer(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddrResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddrResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddrResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddrResponse::MergeFrom(const AddrResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  peer_.MergeFrom(from.peer_);
}

void AddrResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddrResponse::CopyFrom(const AddrResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddrResponse::IsInitialized() const {

  return true;
}

void AddrResponse::Swap(AddrResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddrResponse::InternalSwap(AddrResponse* other) {
  peer_.UnsafeArenaSwap(&other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddrResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddrResponse_descriptor_;
  metadata.reflection = AddrResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddrResponse

// repeated string peer = 1;
int AddrResponse::peer_size() const {
  return peer_.size();
}
void AddrResponse::clear_peer() {
  peer_.Clear();
}
 const ::std::string& AddrResponse::peer(int index) const {
  // @@protoc_insertion_point(field_get:AddrResponse.peer)
  return peer_.Get(index);
}
 ::std::string* AddrResponse::mutable_peer(int index) {
  // @@protoc_insertion_point(field_mutable:AddrResponse.peer)
  return peer_.Mutable(index);
}
 void AddrResponse::set_peer(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AddrResponse.peer)
  peer_.Mutable(index)->assign(value);
}
 void AddrResponse::set_peer(int index, const char* value) {
  peer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AddrResponse.peer)
}
 void AddrResponse::set_peer(int index, const char* value, size_t size) {
  peer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AddrResponse.peer)
}
 ::std::string* AddrResponse::add_peer() {
  return peer_.Add();
}
 void AddrResponse::add_peer(const ::std::string& value) {
  peer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AddrResponse.peer)
}
 void AddrResponse::add_peer(const char* value) {
  peer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AddrResponse.peer)
}
 void AddrResponse::add_peer(const char* value, size_t size) {
  peer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AddrResponse.peer)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddrResponse::peer() const {
  // @@protoc_insertion_point(field_list:AddrResponse.peer)
  return peer_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
AddrResponse::mutable_peer() {
  // @@protoc_insertion_point(field_mutable_list:AddrResponse.peer)
  return &peer_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionRequest::kPublickeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionRequest::TransactionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransactionRequest)
}

void TransactionRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TransactionRequest::TransactionRequest(const TransactionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TransactionRequest)
}

void TransactionRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  publickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TransactionRequest::~TransactionRequest() {
  // @@protoc_insertion_point(destructor:TransactionRequest)
  SharedDtor();
}

void TransactionRequest::SharedDtor() {
  publickey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransactionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionRequest_descriptor_;
}

const TransactionRequest& TransactionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

TransactionRequest* TransactionRequest::default_instance_ = NULL;

TransactionRequest* TransactionRequest::New(::google::protobuf::Arena* arena) const {
  TransactionRequest* n = new TransactionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionRequest::Clear() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TransactionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransactionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string publickey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publickey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publickey().data(), this->publickey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TransactionRequest.publickey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransactionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransactionRequest)
  return false;
#undef DO_
}

void TransactionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransactionRequest)
  // optional string publickey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TransactionRequest.publickey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->publickey(), output);
  }

  // @@protoc_insertion_point(serialize_end:TransactionRequest)
}

::google::protobuf::uint8* TransactionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransactionRequest)
  // optional string publickey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TransactionRequest.publickey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->publickey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TransactionRequest)
  return target;
}

int TransactionRequest::ByteSize() const {
  int total_size = 0;

  // optional string publickey = 1;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publickey());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionRequest::MergeFrom(const TransactionRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
}

void TransactionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionRequest::CopyFrom(const TransactionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRequest::IsInitialized() const {

  return true;
}

void TransactionRequest::Swap(TransactionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionRequest::InternalSwap(TransactionRequest* other) {
  publickey_.Swap(&other->publickey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionRequest_descriptor_;
  metadata.reflection = TransactionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionRequest

// optional string publickey = 1;
void TransactionRequest::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TransactionRequest::publickey() const {
  // @@protoc_insertion_point(field_get:TransactionRequest.publickey)
  return publickey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionRequest::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransactionRequest.publickey)
}
 void TransactionRequest::set_publickey(const char* value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransactionRequest.publickey)
}
 void TransactionRequest::set_publickey(const char* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransactionRequest.publickey)
}
 ::std::string* TransactionRequest::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:TransactionRequest.publickey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionRequest::release_publickey() {
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionRequest::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:TransactionRequest.publickey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockRequest::kBlockNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockRequest::BlockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BlockRequest)
}

void BlockRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BlockRequest::BlockRequest(const BlockRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BlockRequest)
}

void BlockRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  block_number_ = 0u;
}

BlockRequest::~BlockRequest() {
  // @@protoc_insertion_point(destructor:BlockRequest)
  SharedDtor();
}

void BlockRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockRequest_descriptor_;
}

const BlockRequest& BlockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

BlockRequest* BlockRequest::default_instance_ = NULL;

BlockRequest* BlockRequest::New(::google::protobuf::Arena* arena) const {
  BlockRequest* n = new BlockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockRequest::Clear() {
  block_number_ = 0u;
}

bool BlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BlockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 block_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BlockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BlockRequest)
  return false;
#undef DO_
}

void BlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BlockRequest)
  // optional uint32 block_number = 1;
  if (this->block_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->block_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:BlockRequest)
}

::google::protobuf::uint8* BlockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BlockRequest)
  // optional uint32 block_number = 1;
  if (this->block_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->block_number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BlockRequest)
  return target;
}

int BlockRequest::ByteSize() const {
  int total_size = 0;

  // optional uint32 block_number = 1;
  if (this->block_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->block_number());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BlockRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockRequest::MergeFrom(const BlockRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.block_number() != 0) {
    set_block_number(from.block_number());
  }
}

void BlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockRequest::CopyFrom(const BlockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRequest::IsInitialized() const {

  return true;
}

void BlockRequest::Swap(BlockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockRequest::InternalSwap(BlockRequest* other) {
  std::swap(block_number_, other->block_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockRequest_descriptor_;
  metadata.reflection = BlockRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockRequest

// optional uint32 block_number = 1;
void BlockRequest::clear_block_number() {
  block_number_ = 0u;
}
 ::google::protobuf::uint32 BlockRequest::block_number() const {
  // @@protoc_insertion_point(field_get:BlockRequest.block_number)
  return block_number_;
}
 void BlockRequest::set_block_number(::google::protobuf::uint32 value) {
  
  block_number_ = value;
  // @@protoc_insertion_point(field_set:BlockRequest.block_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
