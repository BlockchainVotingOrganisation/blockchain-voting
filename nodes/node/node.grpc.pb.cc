// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: node.proto

#include "node.pb.h"
#include "node.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace onevote {

static const char* Miner_method_names[] = {
  "/onevote.Miner/BroadcastBlock",
  "/onevote.Miner/BroadcastTransaction",
  "/onevote.Miner/GetAddr",
  "/onevote.Miner/GetTransaction",
  "/onevote.Miner/GetBlock",
  "/onevote.Miner/GetHeartbeat",
};

std::unique_ptr< Miner::Stub> Miner::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Miner::Stub> stub(new Miner::Stub(channel));
  return stub;
}

Miner::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_BroadcastBlock_(Miner_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BroadcastTransaction_(Miner_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAddr_(Miner_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransaction_(Miner_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlock_(Miner_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHeartbeat_(Miner_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Miner::Stub::BroadcastBlock(::grpc::ClientContext* context, const ::onevote::BlockMsg& request, ::onevote::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_BroadcastBlock_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::onevote::Empty>* Miner::Stub::AsyncBroadcastBlockRaw(::grpc::ClientContext* context, const ::onevote::BlockMsg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::onevote::Empty>(channel_.get(), cq, rpcmethod_BroadcastBlock_, context, request);
}

::grpc::Status Miner::Stub::BroadcastTransaction(::grpc::ClientContext* context, const ::onevote::TransactionMsg& request, ::onevote::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_BroadcastTransaction_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::onevote::Empty>* Miner::Stub::AsyncBroadcastTransactionRaw(::grpc::ClientContext* context, const ::onevote::TransactionMsg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::onevote::Empty>(channel_.get(), cq, rpcmethod_BroadcastTransaction_, context, request);
}

::grpc::Status Miner::Stub::GetAddr(::grpc::ClientContext* context, const ::onevote::AddrRequest& request, ::onevote::AddrResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetAddr_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::onevote::AddrResponse>* Miner::Stub::AsyncGetAddrRaw(::grpc::ClientContext* context, const ::onevote::AddrRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::onevote::AddrResponse>(channel_.get(), cq, rpcmethod_GetAddr_, context, request);
}

::grpc::Status Miner::Stub::GetTransaction(::grpc::ClientContext* context, const ::onevote::TransactionRequest& request, ::onevote::TransactionMsg* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetTransaction_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::onevote::TransactionMsg>* Miner::Stub::AsyncGetTransactionRaw(::grpc::ClientContext* context, const ::onevote::TransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::onevote::TransactionMsg>(channel_.get(), cq, rpcmethod_GetTransaction_, context, request);
}

::grpc::Status Miner::Stub::GetBlock(::grpc::ClientContext* context, const ::onevote::BlockRequest& request, ::onevote::BlockMsg* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlock_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::onevote::BlockMsg>* Miner::Stub::AsyncGetBlockRaw(::grpc::ClientContext* context, const ::onevote::BlockRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::onevote::BlockMsg>(channel_.get(), cq, rpcmethod_GetBlock_, context, request);
}

::grpc::Status Miner::Stub::GetHeartbeat(::grpc::ClientContext* context, const ::onevote::Empty& request, ::onevote::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetHeartbeat_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::onevote::Empty>* Miner::Stub::AsyncGetHeartbeatRaw(::grpc::ClientContext* context, const ::onevote::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::onevote::Empty>(channel_.get(), cq, rpcmethod_GetHeartbeat_, context, request);
}

Miner::Service::Service() {
  (void)Miner_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Miner_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Miner::Service, ::onevote::BlockMsg, ::onevote::Empty>(
          std::mem_fn(&Miner::Service::BroadcastBlock), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Miner_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Miner::Service, ::onevote::TransactionMsg, ::onevote::Empty>(
          std::mem_fn(&Miner::Service::BroadcastTransaction), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Miner_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Miner::Service, ::onevote::AddrRequest, ::onevote::AddrResponse>(
          std::mem_fn(&Miner::Service::GetAddr), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Miner_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Miner::Service, ::onevote::TransactionRequest, ::onevote::TransactionMsg>(
          std::mem_fn(&Miner::Service::GetTransaction), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Miner_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Miner::Service, ::onevote::BlockRequest, ::onevote::BlockMsg>(
          std::mem_fn(&Miner::Service::GetBlock), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Miner_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Miner::Service, ::onevote::Empty, ::onevote::Empty>(
          std::mem_fn(&Miner::Service::GetHeartbeat), this)));
}

Miner::Service::~Service() {
}

::grpc::Status Miner::Service::BroadcastBlock(::grpc::ServerContext* context, const ::onevote::BlockMsg* request, ::onevote::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Miner::Service::BroadcastTransaction(::grpc::ServerContext* context, const ::onevote::TransactionMsg* request, ::onevote::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Miner::Service::GetAddr(::grpc::ServerContext* context, const ::onevote::AddrRequest* request, ::onevote::AddrResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Miner::Service::GetTransaction(::grpc::ServerContext* context, const ::onevote::TransactionRequest* request, ::onevote::TransactionMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Miner::Service::GetBlock(::grpc::ServerContext* context, const ::onevote::BlockRequest* request, ::onevote::BlockMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Miner::Service::GetHeartbeat(::grpc::ServerContext* context, const ::onevote::Empty* request, ::onevote::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace onevote

