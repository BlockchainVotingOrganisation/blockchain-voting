// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#ifndef PROTOBUF_node_2eproto__INCLUDED
#define PROTOBUF_node_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace onvevote {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_node_2eproto();
void protobuf_AssignDesc_node_2eproto();
void protobuf_ShutdownFile_node_2eproto();

class AddrRequest;
class AddrResponse;
class BlockMsg;
class BlockRequest;
class Empty;
class TransactionMsg;
class TransactionRequest;

// ===================================================================

class Empty : public ::google::protobuf::Message {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  void Swap(Empty* other);

  // implements Message ----------------------------------------------

  inline Empty* New() const { return New(NULL); }

  Empty* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onvevote.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static Empty* default_instance_;
};
// -------------------------------------------------------------------

class BlockMsg : public ::google::protobuf::Message {
 public:
  BlockMsg();
  virtual ~BlockMsg();

  BlockMsg(const BlockMsg& from);

  inline BlockMsg& operator=(const BlockMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockMsg& default_instance();

  void Swap(BlockMsg* other);

  // implements Message ----------------------------------------------

  inline BlockMsg* New() const { return New(NULL); }

  BlockMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockMsg& from);
  void MergeFrom(const BlockMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 block_number = 8;
  void clear_block_number();
  static const int kBlockNumberFieldNumber = 8;
  ::google::protobuf::uint32 block_number() const;
  void set_block_number(::google::protobuf::uint32 value);

  // optional string prev_block_SHA1 = 1;
  void clear_prev_block_sha1();
  static const int kPrevBlockSHA1FieldNumber = 1;
  const ::std::string& prev_block_sha1() const;
  void set_prev_block_sha1(const ::std::string& value);
  void set_prev_block_sha1(const char* value);
  void set_prev_block_sha1(const char* value, size_t size);
  ::std::string* mutable_prev_block_sha1();
  ::std::string* release_prev_block_sha1();
  void set_allocated_prev_block_sha1(::std::string* prev_block_sha1);

  // optional int64 magic = 2;
  void clear_magic();
  static const int kMagicFieldNumber = 2;
  ::google::protobuf::int64 magic() const;
  void set_magic(::google::protobuf::int64 value);

  // optional string merkle_root = 3;
  void clear_merkle_root();
  static const int kMerkleRootFieldNumber = 3;
  const ::std::string& merkle_root() const;
  void set_merkle_root(const ::std::string& value);
  void set_merkle_root(const char* value);
  void set_merkle_root(const char* value, size_t size);
  ::std::string* mutable_merkle_root();
  ::std::string* release_merkle_root();
  void set_allocated_merkle_root(::std::string* merkle_root);

  // repeated .onvevote.TransactionMsg transaction_msg = 4;
  int transaction_msg_size() const;
  void clear_transaction_msg();
  static const int kTransactionMsgFieldNumber = 4;
  const ::onvevote::TransactionMsg& transaction_msg(int index) const;
  ::onvevote::TransactionMsg* mutable_transaction_msg(int index);
  ::onvevote::TransactionMsg* add_transaction_msg();
  ::google::protobuf::RepeatedPtrField< ::onvevote::TransactionMsg >*
      mutable_transaction_msg();
  const ::google::protobuf::RepeatedPtrField< ::onvevote::TransactionMsg >&
      transaction_msg() const;

  // optional uint32 num_transactions = 5;
  void clear_num_transactions();
  static const int kNumTransactionsFieldNumber = 5;
  ::google::protobuf::uint32 num_transactions() const;
  void set_num_transactions(::google::protobuf::uint32 value);

  // optional string verifier_public_key = 6;
  void clear_verifier_public_key();
  static const int kVerifierPublicKeyFieldNumber = 6;
  const ::std::string& verifier_public_key() const;
  void set_verifier_public_key(const ::std::string& value);
  void set_verifier_public_key(const char* value);
  void set_verifier_public_key(const char* value, size_t size);
  ::std::string* mutable_verifier_public_key();
  ::std::string* release_verifier_public_key();
  void set_allocated_verifier_public_key(::std::string* verifier_public_key);

  // optional string final_hash = 7;
  void clear_final_hash();
  static const int kFinalHashFieldNumber = 7;
  const ::std::string& final_hash() const;
  void set_final_hash(const ::std::string& value);
  void set_final_hash(const char* value);
  void set_final_hash(const char* value, size_t size);
  ::std::string* mutable_final_hash();
  ::std::string* release_final_hash();
  void set_allocated_final_hash(::std::string* final_hash);

  // @@protoc_insertion_point(class_scope:onvevote.BlockMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr prev_block_sha1_;
  ::google::protobuf::int64 magic_;
  ::google::protobuf::uint32 block_number_;
  ::google::protobuf::uint32 num_transactions_;
  ::google::protobuf::internal::ArenaStringPtr merkle_root_;
  ::google::protobuf::RepeatedPtrField< ::onvevote::TransactionMsg > transaction_msg_;
  ::google::protobuf::internal::ArenaStringPtr verifier_public_key_;
  ::google::protobuf::internal::ArenaStringPtr final_hash_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static BlockMsg* default_instance_;
};
// -------------------------------------------------------------------

class TransactionMsg : public ::google::protobuf::Message {
 public:
  TransactionMsg();
  virtual ~TransactionMsg();

  TransactionMsg(const TransactionMsg& from);

  inline TransactionMsg& operator=(const TransactionMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionMsg& default_instance();

  void Swap(TransactionMsg* other);

  // implements Message ----------------------------------------------

  inline TransactionMsg* New() const { return New(NULL); }

  TransactionMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionMsg& from);
  void MergeFrom(const TransactionMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sender_public_key = 2;
  void clear_sender_public_key();
  static const int kSenderPublicKeyFieldNumber = 2;
  const ::std::string& sender_public_key() const;
  void set_sender_public_key(const ::std::string& value);
  void set_sender_public_key(const char* value);
  void set_sender_public_key(const char* value, size_t size);
  ::std::string* mutable_sender_public_key();
  ::std::string* release_sender_public_key();
  void set_allocated_sender_public_key(::std::string* sender_public_key);

  // optional string vote = 3;
  void clear_vote();
  static const int kVoteFieldNumber = 3;
  const ::std::string& vote() const;
  void set_vote(const ::std::string& value);
  void set_vote(const char* value);
  void set_vote(const char* value, size_t size);
  ::std::string* mutable_vote();
  ::std::string* release_vote();
  void set_allocated_vote(::std::string* vote);

  // optional double timestamp = 4;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:onvevote.TransactionMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr sender_public_key_;
  ::google::protobuf::internal::ArenaStringPtr vote_;
  double timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static TransactionMsg* default_instance_;
};
// -------------------------------------------------------------------

class AddrRequest : public ::google::protobuf::Message {
 public:
  AddrRequest();
  virtual ~AddrRequest();

  AddrRequest(const AddrRequest& from);

  inline AddrRequest& operator=(const AddrRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddrRequest& default_instance();

  void Swap(AddrRequest* other);

  // implements Message ----------------------------------------------

  inline AddrRequest* New() const { return New(NULL); }

  AddrRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddrRequest& from);
  void MergeFrom(const AddrRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddrRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_requested = 1;
  void clear_num_requested();
  static const int kNumRequestedFieldNumber = 1;
  ::google::protobuf::uint32 num_requested() const;
  void set_num_requested(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:onvevote.AddrRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 num_requested_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static AddrRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddrResponse : public ::google::protobuf::Message {
 public:
  AddrResponse();
  virtual ~AddrResponse();

  AddrResponse(const AddrResponse& from);

  inline AddrResponse& operator=(const AddrResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddrResponse& default_instance();

  void Swap(AddrResponse* other);

  // implements Message ----------------------------------------------

  inline AddrResponse* New() const { return New(NULL); }

  AddrResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddrResponse& from);
  void MergeFrom(const AddrResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddrResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string peer = 1;
  int peer_size() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::std::string& peer(int index) const;
  ::std::string* mutable_peer(int index);
  void set_peer(int index, const ::std::string& value);
  void set_peer(int index, const char* value);
  void set_peer(int index, const char* value, size_t size);
  ::std::string* add_peer();
  void add_peer(const ::std::string& value);
  void add_peer(const char* value);
  void add_peer(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& peer() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_peer();

  // @@protoc_insertion_point(class_scope:onvevote.AddrResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> peer_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static AddrResponse* default_instance_;
};
// -------------------------------------------------------------------

class TransactionRequest : public ::google::protobuf::Message {
 public:
  TransactionRequest();
  virtual ~TransactionRequest();

  TransactionRequest(const TransactionRequest& from);

  inline TransactionRequest& operator=(const TransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionRequest& default_instance();

  void Swap(TransactionRequest* other);

  // implements Message ----------------------------------------------

  inline TransactionRequest* New() const { return New(NULL); }

  TransactionRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionRequest& from);
  void MergeFrom(const TransactionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string publickey = 1;
  void clear_publickey();
  static const int kPublickeyFieldNumber = 1;
  const ::std::string& publickey() const;
  void set_publickey(const ::std::string& value);
  void set_publickey(const char* value);
  void set_publickey(const char* value, size_t size);
  ::std::string* mutable_publickey();
  ::std::string* release_publickey();
  void set_allocated_publickey(::std::string* publickey);

  // @@protoc_insertion_point(class_scope:onvevote.TransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr publickey_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static TransactionRequest* default_instance_;
};
// -------------------------------------------------------------------

class BlockRequest : public ::google::protobuf::Message {
 public:
  BlockRequest();
  virtual ~BlockRequest();

  BlockRequest(const BlockRequest& from);

  inline BlockRequest& operator=(const BlockRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockRequest& default_instance();

  void Swap(BlockRequest* other);

  // implements Message ----------------------------------------------

  inline BlockRequest* New() const { return New(NULL); }

  BlockRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockRequest& from);
  void MergeFrom(const BlockRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 block_number = 1;
  void clear_block_number();
  static const int kBlockNumberFieldNumber = 1;
  ::google::protobuf::uint32 block_number() const;
  void set_block_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:onvevote.BlockRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 block_number_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static BlockRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Empty

// -------------------------------------------------------------------

// BlockMsg

// optional uint32 block_number = 8;
inline void BlockMsg::clear_block_number() {
  block_number_ = 0u;
}
inline ::google::protobuf::uint32 BlockMsg::block_number() const {
  // @@protoc_insertion_point(field_get:onvevote.BlockMsg.block_number)
  return block_number_;
}
inline void BlockMsg::set_block_number(::google::protobuf::uint32 value) {
  
  block_number_ = value;
  // @@protoc_insertion_point(field_set:onvevote.BlockMsg.block_number)
}

// optional string prev_block_SHA1 = 1;
inline void BlockMsg::clear_prev_block_sha1() {
  prev_block_sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockMsg::prev_block_sha1() const {
  // @@protoc_insertion_point(field_get:onvevote.BlockMsg.prev_block_SHA1)
  return prev_block_sha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockMsg::set_prev_block_sha1(const ::std::string& value) {
  
  prev_block_sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvevote.BlockMsg.prev_block_SHA1)
}
inline void BlockMsg::set_prev_block_sha1(const char* value) {
  
  prev_block_sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvevote.BlockMsg.prev_block_SHA1)
}
inline void BlockMsg::set_prev_block_sha1(const char* value, size_t size) {
  
  prev_block_sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvevote.BlockMsg.prev_block_SHA1)
}
inline ::std::string* BlockMsg::mutable_prev_block_sha1() {
  
  // @@protoc_insertion_point(field_mutable:onvevote.BlockMsg.prev_block_SHA1)
  return prev_block_sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockMsg::release_prev_block_sha1() {
  
  return prev_block_sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockMsg::set_allocated_prev_block_sha1(::std::string* prev_block_sha1) {
  if (prev_block_sha1 != NULL) {
    
  } else {
    
  }
  prev_block_sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_block_sha1);
  // @@protoc_insertion_point(field_set_allocated:onvevote.BlockMsg.prev_block_SHA1)
}

// optional int64 magic = 2;
inline void BlockMsg::clear_magic() {
  magic_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BlockMsg::magic() const {
  // @@protoc_insertion_point(field_get:onvevote.BlockMsg.magic)
  return magic_;
}
inline void BlockMsg::set_magic(::google::protobuf::int64 value) {
  
  magic_ = value;
  // @@protoc_insertion_point(field_set:onvevote.BlockMsg.magic)
}

// optional string merkle_root = 3;
inline void BlockMsg::clear_merkle_root() {
  merkle_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockMsg::merkle_root() const {
  // @@protoc_insertion_point(field_get:onvevote.BlockMsg.merkle_root)
  return merkle_root_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockMsg::set_merkle_root(const ::std::string& value) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvevote.BlockMsg.merkle_root)
}
inline void BlockMsg::set_merkle_root(const char* value) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvevote.BlockMsg.merkle_root)
}
inline void BlockMsg::set_merkle_root(const char* value, size_t size) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvevote.BlockMsg.merkle_root)
}
inline ::std::string* BlockMsg::mutable_merkle_root() {
  
  // @@protoc_insertion_point(field_mutable:onvevote.BlockMsg.merkle_root)
  return merkle_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockMsg::release_merkle_root() {
  
  return merkle_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockMsg::set_allocated_merkle_root(::std::string* merkle_root) {
  if (merkle_root != NULL) {
    
  } else {
    
  }
  merkle_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkle_root);
  // @@protoc_insertion_point(field_set_allocated:onvevote.BlockMsg.merkle_root)
}

// repeated .onvevote.TransactionMsg transaction_msg = 4;
inline int BlockMsg::transaction_msg_size() const {
  return transaction_msg_.size();
}
inline void BlockMsg::clear_transaction_msg() {
  transaction_msg_.Clear();
}
inline const ::onvevote::TransactionMsg& BlockMsg::transaction_msg(int index) const {
  // @@protoc_insertion_point(field_get:onvevote.BlockMsg.transaction_msg)
  return transaction_msg_.Get(index);
}
inline ::onvevote::TransactionMsg* BlockMsg::mutable_transaction_msg(int index) {
  // @@protoc_insertion_point(field_mutable:onvevote.BlockMsg.transaction_msg)
  return transaction_msg_.Mutable(index);
}
inline ::onvevote::TransactionMsg* BlockMsg::add_transaction_msg() {
  // @@protoc_insertion_point(field_add:onvevote.BlockMsg.transaction_msg)
  return transaction_msg_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::onvevote::TransactionMsg >*
BlockMsg::mutable_transaction_msg() {
  // @@protoc_insertion_point(field_mutable_list:onvevote.BlockMsg.transaction_msg)
  return &transaction_msg_;
}
inline const ::google::protobuf::RepeatedPtrField< ::onvevote::TransactionMsg >&
BlockMsg::transaction_msg() const {
  // @@protoc_insertion_point(field_list:onvevote.BlockMsg.transaction_msg)
  return transaction_msg_;
}

// optional uint32 num_transactions = 5;
inline void BlockMsg::clear_num_transactions() {
  num_transactions_ = 0u;
}
inline ::google::protobuf::uint32 BlockMsg::num_transactions() const {
  // @@protoc_insertion_point(field_get:onvevote.BlockMsg.num_transactions)
  return num_transactions_;
}
inline void BlockMsg::set_num_transactions(::google::protobuf::uint32 value) {
  
  num_transactions_ = value;
  // @@protoc_insertion_point(field_set:onvevote.BlockMsg.num_transactions)
}

// optional string verifier_public_key = 6;
inline void BlockMsg::clear_verifier_public_key() {
  verifier_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockMsg::verifier_public_key() const {
  // @@protoc_insertion_point(field_get:onvevote.BlockMsg.verifier_public_key)
  return verifier_public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockMsg::set_verifier_public_key(const ::std::string& value) {
  
  verifier_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvevote.BlockMsg.verifier_public_key)
}
inline void BlockMsg::set_verifier_public_key(const char* value) {
  
  verifier_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvevote.BlockMsg.verifier_public_key)
}
inline void BlockMsg::set_verifier_public_key(const char* value, size_t size) {
  
  verifier_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvevote.BlockMsg.verifier_public_key)
}
inline ::std::string* BlockMsg::mutable_verifier_public_key() {
  
  // @@protoc_insertion_point(field_mutable:onvevote.BlockMsg.verifier_public_key)
  return verifier_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockMsg::release_verifier_public_key() {
  
  return verifier_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockMsg::set_allocated_verifier_public_key(::std::string* verifier_public_key) {
  if (verifier_public_key != NULL) {
    
  } else {
    
  }
  verifier_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifier_public_key);
  // @@protoc_insertion_point(field_set_allocated:onvevote.BlockMsg.verifier_public_key)
}

// optional string final_hash = 7;
inline void BlockMsg::clear_final_hash() {
  final_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockMsg::final_hash() const {
  // @@protoc_insertion_point(field_get:onvevote.BlockMsg.final_hash)
  return final_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockMsg::set_final_hash(const ::std::string& value) {
  
  final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvevote.BlockMsg.final_hash)
}
inline void BlockMsg::set_final_hash(const char* value) {
  
  final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvevote.BlockMsg.final_hash)
}
inline void BlockMsg::set_final_hash(const char* value, size_t size) {
  
  final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvevote.BlockMsg.final_hash)
}
inline ::std::string* BlockMsg::mutable_final_hash() {
  
  // @@protoc_insertion_point(field_mutable:onvevote.BlockMsg.final_hash)
  return final_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockMsg::release_final_hash() {
  
  return final_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockMsg::set_allocated_final_hash(::std::string* final_hash) {
  if (final_hash != NULL) {
    
  } else {
    
  }
  final_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), final_hash);
  // @@protoc_insertion_point(field_set_allocated:onvevote.BlockMsg.final_hash)
}

// -------------------------------------------------------------------

// TransactionMsg

// optional string sender_public_key = 2;
inline void TransactionMsg::clear_sender_public_key() {
  sender_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransactionMsg::sender_public_key() const {
  // @@protoc_insertion_point(field_get:onvevote.TransactionMsg.sender_public_key)
  return sender_public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionMsg::set_sender_public_key(const ::std::string& value) {
  
  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvevote.TransactionMsg.sender_public_key)
}
inline void TransactionMsg::set_sender_public_key(const char* value) {
  
  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvevote.TransactionMsg.sender_public_key)
}
inline void TransactionMsg::set_sender_public_key(const char* value, size_t size) {
  
  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvevote.TransactionMsg.sender_public_key)
}
inline ::std::string* TransactionMsg::mutable_sender_public_key() {
  
  // @@protoc_insertion_point(field_mutable:onvevote.TransactionMsg.sender_public_key)
  return sender_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionMsg::release_sender_public_key() {
  
  return sender_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionMsg::set_allocated_sender_public_key(::std::string* sender_public_key) {
  if (sender_public_key != NULL) {
    
  } else {
    
  }
  sender_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_public_key);
  // @@protoc_insertion_point(field_set_allocated:onvevote.TransactionMsg.sender_public_key)
}

// optional string vote = 3;
inline void TransactionMsg::clear_vote() {
  vote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransactionMsg::vote() const {
  // @@protoc_insertion_point(field_get:onvevote.TransactionMsg.vote)
  return vote_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionMsg::set_vote(const ::std::string& value) {
  
  vote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvevote.TransactionMsg.vote)
}
inline void TransactionMsg::set_vote(const char* value) {
  
  vote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvevote.TransactionMsg.vote)
}
inline void TransactionMsg::set_vote(const char* value, size_t size) {
  
  vote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvevote.TransactionMsg.vote)
}
inline ::std::string* TransactionMsg::mutable_vote() {
  
  // @@protoc_insertion_point(field_mutable:onvevote.TransactionMsg.vote)
  return vote_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionMsg::release_vote() {
  
  return vote_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionMsg::set_allocated_vote(::std::string* vote) {
  if (vote != NULL) {
    
  } else {
    
  }
  vote_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vote);
  // @@protoc_insertion_point(field_set_allocated:onvevote.TransactionMsg.vote)
}

// optional double timestamp = 4;
inline void TransactionMsg::clear_timestamp() {
  timestamp_ = 0;
}
inline double TransactionMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:onvevote.TransactionMsg.timestamp)
  return timestamp_;
}
inline void TransactionMsg::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:onvevote.TransactionMsg.timestamp)
}

// -------------------------------------------------------------------

// AddrRequest

// optional uint32 num_requested = 1;
inline void AddrRequest::clear_num_requested() {
  num_requested_ = 0u;
}
inline ::google::protobuf::uint32 AddrRequest::num_requested() const {
  // @@protoc_insertion_point(field_get:onvevote.AddrRequest.num_requested)
  return num_requested_;
}
inline void AddrRequest::set_num_requested(::google::protobuf::uint32 value) {
  
  num_requested_ = value;
  // @@protoc_insertion_point(field_set:onvevote.AddrRequest.num_requested)
}

// -------------------------------------------------------------------

// AddrResponse

// repeated string peer = 1;
inline int AddrResponse::peer_size() const {
  return peer_.size();
}
inline void AddrResponse::clear_peer() {
  peer_.Clear();
}
inline const ::std::string& AddrResponse::peer(int index) const {
  // @@protoc_insertion_point(field_get:onvevote.AddrResponse.peer)
  return peer_.Get(index);
}
inline ::std::string* AddrResponse::mutable_peer(int index) {
  // @@protoc_insertion_point(field_mutable:onvevote.AddrResponse.peer)
  return peer_.Mutable(index);
}
inline void AddrResponse::set_peer(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onvevote.AddrResponse.peer)
  peer_.Mutable(index)->assign(value);
}
inline void AddrResponse::set_peer(int index, const char* value) {
  peer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onvevote.AddrResponse.peer)
}
inline void AddrResponse::set_peer(int index, const char* value, size_t size) {
  peer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onvevote.AddrResponse.peer)
}
inline ::std::string* AddrResponse::add_peer() {
  return peer_.Add();
}
inline void AddrResponse::add_peer(const ::std::string& value) {
  peer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onvevote.AddrResponse.peer)
}
inline void AddrResponse::add_peer(const char* value) {
  peer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onvevote.AddrResponse.peer)
}
inline void AddrResponse::add_peer(const char* value, size_t size) {
  peer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onvevote.AddrResponse.peer)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddrResponse::peer() const {
  // @@protoc_insertion_point(field_list:onvevote.AddrResponse.peer)
  return peer_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AddrResponse::mutable_peer() {
  // @@protoc_insertion_point(field_mutable_list:onvevote.AddrResponse.peer)
  return &peer_;
}

// -------------------------------------------------------------------

// TransactionRequest

// optional string publickey = 1;
inline void TransactionRequest::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransactionRequest::publickey() const {
  // @@protoc_insertion_point(field_get:onvevote.TransactionRequest.publickey)
  return publickey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionRequest::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvevote.TransactionRequest.publickey)
}
inline void TransactionRequest::set_publickey(const char* value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvevote.TransactionRequest.publickey)
}
inline void TransactionRequest::set_publickey(const char* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvevote.TransactionRequest.publickey)
}
inline ::std::string* TransactionRequest::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:onvevote.TransactionRequest.publickey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionRequest::release_publickey() {
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionRequest::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:onvevote.TransactionRequest.publickey)
}

// -------------------------------------------------------------------

// BlockRequest

// optional uint32 block_number = 1;
inline void BlockRequest::clear_block_number() {
  block_number_ = 0u;
}
inline ::google::protobuf::uint32 BlockRequest::block_number() const {
  // @@protoc_insertion_point(field_get:onvevote.BlockRequest.block_number)
  return block_number_;
}
inline void BlockRequest::set_block_number(::google::protobuf::uint32 value) {
  
  block_number_ = value;
  // @@protoc_insertion_point(field_set:onvevote.BlockRequest.block_number)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace onvevote

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_node_2eproto__INCLUDED
