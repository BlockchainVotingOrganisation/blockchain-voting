// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#ifndef PROTOBUF_node_2eproto__INCLUDED
#define PROTOBUF_node_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace onvevote {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_node_2eproto();
void protobuf_AssignDesc_node_2eproto();
void protobuf_ShutdownFile_node_2eproto();

class AddrRequest;
class AddrResponse;
class Block;
class BlockRequest;
class EmptyRequest;
class Success;
class Transaction;
class TransactionRequest;

// ===================================================================

class EmptyRequest : public ::google::protobuf::Message {
 public:
  EmptyRequest();
  virtual ~EmptyRequest();

  EmptyRequest(const EmptyRequest& from);

  inline EmptyRequest& operator=(const EmptyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmptyRequest& default_instance();

  void Swap(EmptyRequest* other);

  // implements Message ----------------------------------------------

  inline EmptyRequest* New() const { return New(NULL); }

  EmptyRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmptyRequest& from);
  void MergeFrom(const EmptyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmptyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onvevote.EmptyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static EmptyRequest* default_instance_;
};
// -------------------------------------------------------------------

class Success : public ::google::protobuf::Message {
 public:
  Success();
  virtual ~Success();

  Success(const Success& from);

  inline Success& operator=(const Success& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Success& default_instance();

  void Swap(Success* other);

  // implements Message ----------------------------------------------

  inline Success* New() const { return New(NULL); }

  Success* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Success& from);
  void MergeFrom(const Success& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Success* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:onvevote.Success)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool success_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static Success* default_instance_;
};
// -------------------------------------------------------------------

class Block : public ::google::protobuf::Message {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  void Swap(Block* other);

  // implements Message ----------------------------------------------

  inline Block* New() const { return New(NULL); }

  Block* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 block_number = 8;
  void clear_block_number();
  static const int kBlockNumberFieldNumber = 8;
  ::google::protobuf::uint32 block_number() const;
  void set_block_number(::google::protobuf::uint32 value);

  // optional string prev_block_SHA1 = 1;
  void clear_prev_block_sha1();
  static const int kPrevBlockSHA1FieldNumber = 1;
  const ::std::string& prev_block_sha1() const;
  void set_prev_block_sha1(const ::std::string& value);
  void set_prev_block_sha1(const char* value);
  void set_prev_block_sha1(const char* value, size_t size);
  ::std::string* mutable_prev_block_sha1();
  ::std::string* release_prev_block_sha1();
  void set_allocated_prev_block_sha1(::std::string* prev_block_sha1);

  // optional int64 magic = 2;
  void clear_magic();
  static const int kMagicFieldNumber = 2;
  ::google::protobuf::int64 magic() const;
  void set_magic(::google::protobuf::int64 value);

  // optional string merkle_root = 3;
  void clear_merkle_root();
  static const int kMerkleRootFieldNumber = 3;
  const ::std::string& merkle_root() const;
  void set_merkle_root(const ::std::string& value);
  void set_merkle_root(const char* value);
  void set_merkle_root(const char* value, size_t size);
  ::std::string* mutable_merkle_root();
  ::std::string* release_merkle_root();
  void set_allocated_merkle_root(::std::string* merkle_root);

  // repeated .onvevote.Transaction transaction = 4;
  int transaction_size() const;
  void clear_transaction();
  static const int kTransactionFieldNumber = 4;
  const ::onvevote::Transaction& transaction(int index) const;
  ::onvevote::Transaction* mutable_transaction(int index);
  ::onvevote::Transaction* add_transaction();
  ::google::protobuf::RepeatedPtrField< ::onvevote::Transaction >*
      mutable_transaction();
  const ::google::protobuf::RepeatedPtrField< ::onvevote::Transaction >&
      transaction() const;

  // optional uint32 num_transactions = 5;
  void clear_num_transactions();
  static const int kNumTransactionsFieldNumber = 5;
  ::google::protobuf::uint32 num_transactions() const;
  void set_num_transactions(::google::protobuf::uint32 value);

  // optional string verifier_public_key = 6;
  void clear_verifier_public_key();
  static const int kVerifierPublicKeyFieldNumber = 6;
  const ::std::string& verifier_public_key() const;
  void set_verifier_public_key(const ::std::string& value);
  void set_verifier_public_key(const char* value);
  void set_verifier_public_key(const char* value, size_t size);
  ::std::string* mutable_verifier_public_key();
  ::std::string* release_verifier_public_key();
  void set_allocated_verifier_public_key(::std::string* verifier_public_key);

  // optional string final_hash = 7;
  void clear_final_hash();
  static const int kFinalHashFieldNumber = 7;
  const ::std::string& final_hash() const;
  void set_final_hash(const ::std::string& value);
  void set_final_hash(const char* value);
  void set_final_hash(const char* value, size_t size);
  ::std::string* mutable_final_hash();
  ::std::string* release_final_hash();
  void set_allocated_final_hash(::std::string* final_hash);

  // @@protoc_insertion_point(class_scope:onvevote.Block)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr prev_block_sha1_;
  ::google::protobuf::int64 magic_;
  ::google::protobuf::uint32 block_number_;
  ::google::protobuf::uint32 num_transactions_;
  ::google::protobuf::internal::ArenaStringPtr merkle_root_;
  ::google::protobuf::RepeatedPtrField< ::onvevote::Transaction > transaction_;
  ::google::protobuf::internal::ArenaStringPtr verifier_public_key_;
  ::google::protobuf::internal::ArenaStringPtr final_hash_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static Block* default_instance_;
};
// -------------------------------------------------------------------

class Transaction : public ::google::protobuf::Message {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction& default_instance();

  void Swap(Transaction* other);

  // implements Message ----------------------------------------------

  inline Transaction* New() const { return New(NULL); }

  Transaction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sender_public_key = 2;
  void clear_sender_public_key();
  static const int kSenderPublicKeyFieldNumber = 2;
  const ::std::string& sender_public_key() const;
  void set_sender_public_key(const ::std::string& value);
  void set_sender_public_key(const char* value);
  void set_sender_public_key(const char* value, size_t size);
  ::std::string* mutable_sender_public_key();
  ::std::string* release_sender_public_key();
  void set_allocated_sender_public_key(::std::string* sender_public_key);

  // optional string vote = 3;
  void clear_vote();
  static const int kVoteFieldNumber = 3;
  const ::std::string& vote() const;
  void set_vote(const ::std::string& value);
  void set_vote(const char* value);
  void set_vote(const char* value, size_t size);
  ::std::string* mutable_vote();
  ::std::string* release_vote();
  void set_allocated_vote(::std::string* vote);

  // optional double timestamp = 4;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:onvevote.Transaction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr sender_public_key_;
  ::google::protobuf::internal::ArenaStringPtr vote_;
  double timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static Transaction* default_instance_;
};
// -------------------------------------------------------------------

class AddrRequest : public ::google::protobuf::Message {
 public:
  AddrRequest();
  virtual ~AddrRequest();

  AddrRequest(const AddrRequest& from);

  inline AddrRequest& operator=(const AddrRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddrRequest& default_instance();

  void Swap(AddrRequest* other);

  // implements Message ----------------------------------------------

  inline AddrRequest* New() const { return New(NULL); }

  AddrRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddrRequest& from);
  void MergeFrom(const AddrRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddrRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_requested = 1;
  void clear_num_requested();
  static const int kNumRequestedFieldNumber = 1;
  ::google::protobuf::uint32 num_requested() const;
  void set_num_requested(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:onvevote.AddrRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 num_requested_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static AddrRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddrResponse : public ::google::protobuf::Message {
 public:
  AddrResponse();
  virtual ~AddrResponse();

  AddrResponse(const AddrResponse& from);

  inline AddrResponse& operator=(const AddrResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddrResponse& default_instance();

  void Swap(AddrResponse* other);

  // implements Message ----------------------------------------------

  inline AddrResponse* New() const { return New(NULL); }

  AddrResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddrResponse& from);
  void MergeFrom(const AddrResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddrResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string peer = 1;
  int peer_size() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::std::string& peer(int index) const;
  ::std::string* mutable_peer(int index);
  void set_peer(int index, const ::std::string& value);
  void set_peer(int index, const char* value);
  void set_peer(int index, const char* value, size_t size);
  ::std::string* add_peer();
  void add_peer(const ::std::string& value);
  void add_peer(const char* value);
  void add_peer(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& peer() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_peer();

  // @@protoc_insertion_point(class_scope:onvevote.AddrResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> peer_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static AddrResponse* default_instance_;
};
// -------------------------------------------------------------------

class TransactionRequest : public ::google::protobuf::Message {
 public:
  TransactionRequest();
  virtual ~TransactionRequest();

  TransactionRequest(const TransactionRequest& from);

  inline TransactionRequest& operator=(const TransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionRequest& default_instance();

  void Swap(TransactionRequest* other);

  // implements Message ----------------------------------------------

  inline TransactionRequest* New() const { return New(NULL); }

  TransactionRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionRequest& from);
  void MergeFrom(const TransactionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string publickey = 1;
  void clear_publickey();
  static const int kPublickeyFieldNumber = 1;
  const ::std::string& publickey() const;
  void set_publickey(const ::std::string& value);
  void set_publickey(const char* value);
  void set_publickey(const char* value, size_t size);
  ::std::string* mutable_publickey();
  ::std::string* release_publickey();
  void set_allocated_publickey(::std::string* publickey);

  // @@protoc_insertion_point(class_scope:onvevote.TransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr publickey_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static TransactionRequest* default_instance_;
};
// -------------------------------------------------------------------

class BlockRequest : public ::google::protobuf::Message {
 public:
  BlockRequest();
  virtual ~BlockRequest();

  BlockRequest(const BlockRequest& from);

  inline BlockRequest& operator=(const BlockRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockRequest& default_instance();

  void Swap(BlockRequest* other);

  // implements Message ----------------------------------------------

  inline BlockRequest* New() const { return New(NULL); }

  BlockRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockRequest& from);
  void MergeFrom(const BlockRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 block_number = 1;
  void clear_block_number();
  static const int kBlockNumberFieldNumber = 1;
  ::google::protobuf::uint32 block_number() const;
  void set_block_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:onvevote.BlockRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 block_number_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_node_2eproto();
  friend void protobuf_AssignDesc_node_2eproto();
  friend void protobuf_ShutdownFile_node_2eproto();

  void InitAsDefaultInstance();
  static BlockRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EmptyRequest

// -------------------------------------------------------------------

// Success

// optional bool success = 1;
inline void Success::clear_success() {
  success_ = false;
}
inline bool Success::success() const {
  // @@protoc_insertion_point(field_get:onvevote.Success.success)
  return success_;
}
inline void Success::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:onvevote.Success.success)
}

// optional string message = 2;
inline void Success::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Success::message() const {
  // @@protoc_insertion_point(field_get:onvevote.Success.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Success::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvevote.Success.message)
}
inline void Success::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvevote.Success.message)
}
inline void Success::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvevote.Success.message)
}
inline ::std::string* Success::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:onvevote.Success.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Success::release_message() {
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Success::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:onvevote.Success.message)
}

// -------------------------------------------------------------------

// Block

// optional uint32 block_number = 8;
inline void Block::clear_block_number() {
  block_number_ = 0u;
}
inline ::google::protobuf::uint32 Block::block_number() const {
  // @@protoc_insertion_point(field_get:onvevote.Block.block_number)
  return block_number_;
}
inline void Block::set_block_number(::google::protobuf::uint32 value) {
  
  block_number_ = value;
  // @@protoc_insertion_point(field_set:onvevote.Block.block_number)
}

// optional string prev_block_SHA1 = 1;
inline void Block::clear_prev_block_sha1() {
  prev_block_sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::prev_block_sha1() const {
  // @@protoc_insertion_point(field_get:onvevote.Block.prev_block_SHA1)
  return prev_block_sha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_prev_block_sha1(const ::std::string& value) {
  
  prev_block_sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvevote.Block.prev_block_SHA1)
}
inline void Block::set_prev_block_sha1(const char* value) {
  
  prev_block_sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvevote.Block.prev_block_SHA1)
}
inline void Block::set_prev_block_sha1(const char* value, size_t size) {
  
  prev_block_sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvevote.Block.prev_block_SHA1)
}
inline ::std::string* Block::mutable_prev_block_sha1() {
  
  // @@protoc_insertion_point(field_mutable:onvevote.Block.prev_block_SHA1)
  return prev_block_sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_prev_block_sha1() {
  
  return prev_block_sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_prev_block_sha1(::std::string* prev_block_sha1) {
  if (prev_block_sha1 != NULL) {
    
  } else {
    
  }
  prev_block_sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prev_block_sha1);
  // @@protoc_insertion_point(field_set_allocated:onvevote.Block.prev_block_SHA1)
}

// optional int64 magic = 2;
inline void Block::clear_magic() {
  magic_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Block::magic() const {
  // @@protoc_insertion_point(field_get:onvevote.Block.magic)
  return magic_;
}
inline void Block::set_magic(::google::protobuf::int64 value) {
  
  magic_ = value;
  // @@protoc_insertion_point(field_set:onvevote.Block.magic)
}

// optional string merkle_root = 3;
inline void Block::clear_merkle_root() {
  merkle_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::merkle_root() const {
  // @@protoc_insertion_point(field_get:onvevote.Block.merkle_root)
  return merkle_root_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_merkle_root(const ::std::string& value) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvevote.Block.merkle_root)
}
inline void Block::set_merkle_root(const char* value) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvevote.Block.merkle_root)
}
inline void Block::set_merkle_root(const char* value, size_t size) {
  
  merkle_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvevote.Block.merkle_root)
}
inline ::std::string* Block::mutable_merkle_root() {
  
  // @@protoc_insertion_point(field_mutable:onvevote.Block.merkle_root)
  return merkle_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_merkle_root() {
  
  return merkle_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_merkle_root(::std::string* merkle_root) {
  if (merkle_root != NULL) {
    
  } else {
    
  }
  merkle_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkle_root);
  // @@protoc_insertion_point(field_set_allocated:onvevote.Block.merkle_root)
}

// repeated .onvevote.Transaction transaction = 4;
inline int Block::transaction_size() const {
  return transaction_.size();
}
inline void Block::clear_transaction() {
  transaction_.Clear();
}
inline const ::onvevote::Transaction& Block::transaction(int index) const {
  // @@protoc_insertion_point(field_get:onvevote.Block.transaction)
  return transaction_.Get(index);
}
inline ::onvevote::Transaction* Block::mutable_transaction(int index) {
  // @@protoc_insertion_point(field_mutable:onvevote.Block.transaction)
  return transaction_.Mutable(index);
}
inline ::onvevote::Transaction* Block::add_transaction() {
  // @@protoc_insertion_point(field_add:onvevote.Block.transaction)
  return transaction_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::onvevote::Transaction >*
Block::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable_list:onvevote.Block.transaction)
  return &transaction_;
}
inline const ::google::protobuf::RepeatedPtrField< ::onvevote::Transaction >&
Block::transaction() const {
  // @@protoc_insertion_point(field_list:onvevote.Block.transaction)
  return transaction_;
}

// optional uint32 num_transactions = 5;
inline void Block::clear_num_transactions() {
  num_transactions_ = 0u;
}
inline ::google::protobuf::uint32 Block::num_transactions() const {
  // @@protoc_insertion_point(field_get:onvevote.Block.num_transactions)
  return num_transactions_;
}
inline void Block::set_num_transactions(::google::protobuf::uint32 value) {
  
  num_transactions_ = value;
  // @@protoc_insertion_point(field_set:onvevote.Block.num_transactions)
}

// optional string verifier_public_key = 6;
inline void Block::clear_verifier_public_key() {
  verifier_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::verifier_public_key() const {
  // @@protoc_insertion_point(field_get:onvevote.Block.verifier_public_key)
  return verifier_public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_verifier_public_key(const ::std::string& value) {
  
  verifier_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvevote.Block.verifier_public_key)
}
inline void Block::set_verifier_public_key(const char* value) {
  
  verifier_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvevote.Block.verifier_public_key)
}
inline void Block::set_verifier_public_key(const char* value, size_t size) {
  
  verifier_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvevote.Block.verifier_public_key)
}
inline ::std::string* Block::mutable_verifier_public_key() {
  
  // @@protoc_insertion_point(field_mutable:onvevote.Block.verifier_public_key)
  return verifier_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_verifier_public_key() {
  
  return verifier_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_verifier_public_key(::std::string* verifier_public_key) {
  if (verifier_public_key != NULL) {
    
  } else {
    
  }
  verifier_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifier_public_key);
  // @@protoc_insertion_point(field_set_allocated:onvevote.Block.verifier_public_key)
}

// optional string final_hash = 7;
inline void Block::clear_final_hash() {
  final_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::final_hash() const {
  // @@protoc_insertion_point(field_get:onvevote.Block.final_hash)
  return final_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_final_hash(const ::std::string& value) {
  
  final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvevote.Block.final_hash)
}
inline void Block::set_final_hash(const char* value) {
  
  final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvevote.Block.final_hash)
}
inline void Block::set_final_hash(const char* value, size_t size) {
  
  final_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvevote.Block.final_hash)
}
inline ::std::string* Block::mutable_final_hash() {
  
  // @@protoc_insertion_point(field_mutable:onvevote.Block.final_hash)
  return final_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_final_hash() {
  
  return final_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_final_hash(::std::string* final_hash) {
  if (final_hash != NULL) {
    
  } else {
    
  }
  final_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), final_hash);
  // @@protoc_insertion_point(field_set_allocated:onvevote.Block.final_hash)
}

// -------------------------------------------------------------------

// Transaction

// optional string sender_public_key = 2;
inline void Transaction::clear_sender_public_key() {
  sender_public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::sender_public_key() const {
  // @@protoc_insertion_point(field_get:onvevote.Transaction.sender_public_key)
  return sender_public_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_sender_public_key(const ::std::string& value) {
  
  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvevote.Transaction.sender_public_key)
}
inline void Transaction::set_sender_public_key(const char* value) {
  
  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvevote.Transaction.sender_public_key)
}
inline void Transaction::set_sender_public_key(const char* value, size_t size) {
  
  sender_public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvevote.Transaction.sender_public_key)
}
inline ::std::string* Transaction::mutable_sender_public_key() {
  
  // @@protoc_insertion_point(field_mutable:onvevote.Transaction.sender_public_key)
  return sender_public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_sender_public_key() {
  
  return sender_public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_sender_public_key(::std::string* sender_public_key) {
  if (sender_public_key != NULL) {
    
  } else {
    
  }
  sender_public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_public_key);
  // @@protoc_insertion_point(field_set_allocated:onvevote.Transaction.sender_public_key)
}

// optional string vote = 3;
inline void Transaction::clear_vote() {
  vote_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transaction::vote() const {
  // @@protoc_insertion_point(field_get:onvevote.Transaction.vote)
  return vote_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_vote(const ::std::string& value) {
  
  vote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvevote.Transaction.vote)
}
inline void Transaction::set_vote(const char* value) {
  
  vote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvevote.Transaction.vote)
}
inline void Transaction::set_vote(const char* value, size_t size) {
  
  vote_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvevote.Transaction.vote)
}
inline ::std::string* Transaction::mutable_vote() {
  
  // @@protoc_insertion_point(field_mutable:onvevote.Transaction.vote)
  return vote_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_vote() {
  
  return vote_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_vote(::std::string* vote) {
  if (vote != NULL) {
    
  } else {
    
  }
  vote_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vote);
  // @@protoc_insertion_point(field_set_allocated:onvevote.Transaction.vote)
}

// optional double timestamp = 4;
inline void Transaction::clear_timestamp() {
  timestamp_ = 0;
}
inline double Transaction::timestamp() const {
  // @@protoc_insertion_point(field_get:onvevote.Transaction.timestamp)
  return timestamp_;
}
inline void Transaction::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:onvevote.Transaction.timestamp)
}

// -------------------------------------------------------------------

// AddrRequest

// optional uint32 num_requested = 1;
inline void AddrRequest::clear_num_requested() {
  num_requested_ = 0u;
}
inline ::google::protobuf::uint32 AddrRequest::num_requested() const {
  // @@protoc_insertion_point(field_get:onvevote.AddrRequest.num_requested)
  return num_requested_;
}
inline void AddrRequest::set_num_requested(::google::protobuf::uint32 value) {
  
  num_requested_ = value;
  // @@protoc_insertion_point(field_set:onvevote.AddrRequest.num_requested)
}

// -------------------------------------------------------------------

// AddrResponse

// repeated string peer = 1;
inline int AddrResponse::peer_size() const {
  return peer_.size();
}
inline void AddrResponse::clear_peer() {
  peer_.Clear();
}
inline const ::std::string& AddrResponse::peer(int index) const {
  // @@protoc_insertion_point(field_get:onvevote.AddrResponse.peer)
  return peer_.Get(index);
}
inline ::std::string* AddrResponse::mutable_peer(int index) {
  // @@protoc_insertion_point(field_mutable:onvevote.AddrResponse.peer)
  return peer_.Mutable(index);
}
inline void AddrResponse::set_peer(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onvevote.AddrResponse.peer)
  peer_.Mutable(index)->assign(value);
}
inline void AddrResponse::set_peer(int index, const char* value) {
  peer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onvevote.AddrResponse.peer)
}
inline void AddrResponse::set_peer(int index, const char* value, size_t size) {
  peer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onvevote.AddrResponse.peer)
}
inline ::std::string* AddrResponse::add_peer() {
  return peer_.Add();
}
inline void AddrResponse::add_peer(const ::std::string& value) {
  peer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onvevote.AddrResponse.peer)
}
inline void AddrResponse::add_peer(const char* value) {
  peer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onvevote.AddrResponse.peer)
}
inline void AddrResponse::add_peer(const char* value, size_t size) {
  peer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onvevote.AddrResponse.peer)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddrResponse::peer() const {
  // @@protoc_insertion_point(field_list:onvevote.AddrResponse.peer)
  return peer_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AddrResponse::mutable_peer() {
  // @@protoc_insertion_point(field_mutable_list:onvevote.AddrResponse.peer)
  return &peer_;
}

// -------------------------------------------------------------------

// TransactionRequest

// optional string publickey = 1;
inline void TransactionRequest::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransactionRequest::publickey() const {
  // @@protoc_insertion_point(field_get:onvevote.TransactionRequest.publickey)
  return publickey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionRequest::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvevote.TransactionRequest.publickey)
}
inline void TransactionRequest::set_publickey(const char* value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvevote.TransactionRequest.publickey)
}
inline void TransactionRequest::set_publickey(const char* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvevote.TransactionRequest.publickey)
}
inline ::std::string* TransactionRequest::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:onvevote.TransactionRequest.publickey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionRequest::release_publickey() {
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionRequest::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:onvevote.TransactionRequest.publickey)
}

// -------------------------------------------------------------------

// BlockRequest

// optional uint32 block_number = 1;
inline void BlockRequest::clear_block_number() {
  block_number_ = 0u;
}
inline ::google::protobuf::uint32 BlockRequest::block_number() const {
  // @@protoc_insertion_point(field_get:onvevote.BlockRequest.block_number)
  return block_number_;
}
inline void BlockRequest::set_block_number(::google::protobuf::uint32 value) {
  
  block_number_ = value;
  // @@protoc_insertion_point(field_set:onvevote.BlockRequest.block_number)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace onvevote

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_node_2eproto__INCLUDED
